{"version":3,"sources":["serviceWorker.ts","api/types.ts","api/todolists-api.ts","features/CommonActions/App.ts","utils/error-utils.ts","features/TodolistsList/todolists-reducer.ts","features/TodolistsList/tasks-reducer.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","utils/redux-utils.ts","features/TodolistsList/Todolist/Task/Task.tsx","features/TodolistsList/Todolist/Todolist.tsx","features/Auth/selectors.tsx","features/TodolistsList/TodolistsList.tsx","features/TodolistsList/index.tsx","components/ErrorSnackbar/ErrorSnackbar.tsx","features/Application/selectors.ts","features/Auth/auth-reducer.ts","features/Auth/Login.tsx","features/Auth/index.tsx","features/Application/application-reducer.ts","features/Application/index.tsx","app/App.tsx","app/store.ts","index.tsx"],"names":["Boolean","window","location","hostname","match","TaskStatuses","TaskPriorities","instance","axios","create","baseURL","todolistsAPI","get","title","post","id","delete","put","todolistId","taskId","taskTitile","model","authAPI","data","appActions","setAppStatus","createAction","setAppError","handleAsyncServerAppError","thunkAPI","showError","dispatch","error","messages","length","status","rejectWithValue","errors","fieldsErrors","handleAsyncServerNetworkError","message","undefined","fetchTodolistsTC","createAsyncThunk","param","a","res","todolists","removeTodolistTC","changeTodolistEntityStatus","addTodolistTC","resultCode","todolist","item","changeTodolistTitleTC","asyncActions","slice","createSlice","name","initialState","reducers","changeTodolistFilter","state","action","index","findIndex","tl","payload","filter","entityStatus","extraReducers","builder","addCase","fulfilled","map","splice","unshift","actions","fetchTasks","tasks","items","removeTask","addTask","updateTask","getState","task","find","t","apiModel","deadline","description","priority","startDate","asyncTodolistsActions","forEach","todoListId","AddItemForm","React","memo","addItem","disabled","useState","setTitle","setError","addItemHandler","trim","TextField","variant","value","onChange","e","currentTarget","onKeyPress","charCode","label","helperText","IconButton","color","onClick","style","marginLeft","AddBox","EditableSpan","props","console","log","editMode","setEditMode","autoFocus","onBlur","onDoubleClick","useAppDispatch","useDispatch","useActions","useMemo","bindActionCreators","Task","tasksActions","onClickHandler","useCallback","onChangeHandler","checked","Completed","New","onTitleChangeHandler","newValue","key","className","position","Checkbox","size","top","right","Delete","fontSize","Todolist","demo","todolistsActions","useEffect","addTaskCallback","helper","thunk","resultAction","rejected","errorMessage","changeTodolistTitle","onFilterButtonClickHandler","tasksForTodolist","renderFilterButton","buttonFilter","text","Button","Paper","padding","paddingTop","selectIsLoggedIn","auth","isLoggedIn","TodolistsList","useSelector","addTodolistCallback","Grid","container","spacing","flexWrap","overflowX","allTodolistTasks","width","to","todolistsAsyncActions","todolistsSlice","tasksAsyncActions","tasksSlice","todolistsReducer","reducer","tasksReducer","Alert","elevation","ErrorSnackbar","app","handleClose","event","reason","isOpen","Snackbar","open","autoHideDuration","onClose","severity","selectStatus","selectIsInitialized","isInitialized","login","logout","setIsLoggedIn","Login","formik","useFormik","validate","values","email","password","initialValues","rememberMe","onSubmit","formikHelpers","authActions","setFieldError","field","justify","xs","handleSubmit","FormControl","FormLabel","href","FormGroup","margin","getFieldProps","type","FormControlLabel","control","authReducer","initializeApp","appReducer","App","authSelectors","logoutHandler","AppBar","Toolbar","edge","aria-label","Menu","Typography","LinearProgress","Container","fixed","exact","path","render","textAlign","CircularProgress","rootReducer","combineReducers","store","configureStore","middleware","getDefaultMiddleware","prepend","thunkMiddleware","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.e483a54a.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the appActions load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web appActions is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different appActions. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. Application is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","export type LoginParamsType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha?: string\r\n}\r\n// types\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\nexport type FieldErrorType = { field: string; error: string }\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    fieldsErrors?: Array<FieldErrorType>\r\n    data: D\r\n}\r\n\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\n\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\n\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n}\r\nexport type GetTasksResponse = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: TaskType[]\r\n}\r\n","import axios from 'axios'\r\nimport {GetTasksResponse, LoginParamsType, ResponseType, TaskType, TodolistType, UpdateTaskModelType} from './types'\r\n\r\nconst settings = {\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': '9660a6e9-744c-4376-8717-32b82016bc28'\r\n    }\r\n}\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    // ...settings\r\n})\r\n\r\n// api\r\nexport const todolistsAPI = {\r\n    getTodolists() {\r\n        return instance.get<TodolistType[]>('todo-lists');\r\n    },\r\n    createTodolist(title: string) {\r\n        return instance.post<ResponseType<{ item: TodolistType }>>('todo-lists', {title: title});\r\n    },\r\n    deleteTodolist(id: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${id}`);\r\n    },\r\n    updateTodolist(id: string, title: string) {\r\n        return instance.put<ResponseType>(`todo-lists/${id}`, {title: title});\r\n    },\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`);\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`);\r\n    },\r\n    createTask(todolistId: string, taskTitile: string) {\r\n        return instance.post<ResponseType<{ item: TaskType}>>(`todo-lists/${todolistId}/tasks`, {title: taskTitile});\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<ResponseType<TaskType>>(`todo-lists/${todolistId}/tasks/${taskId}`, model);\r\n    }\r\n}\r\n\r\n\r\nexport const authAPI = {\r\n    login(data: LoginParamsType) {\r\n        return instance.post<ResponseType<{userId?: number}>>('auth/login', data);\r\n    },\r\n    logout() {\r\n        return instance.delete<ResponseType<{userId?: number}>>('auth/login');\r\n    },\r\n    me() {\r\n        return instance.get<ResponseType<{id: number; email: string; login: string}>>('auth/me');\r\n    }\r\n}\r\n\r\n","import {createAction} from '@reduxjs/toolkit'\r\nimport {RequestStatusType} from '../Application/application-reducer'\r\n\r\n\r\nconst setAppStatus = createAction<{status: RequestStatusType}>('appActions/setAppStatus')\r\nconst setAppError = createAction<{error: string | null}>('appActions/setAppError')\r\n\r\nexport const appActions = {\r\n    setAppStatus,\r\n    setAppError\r\n}\r\n","import { appActions } from '../features/CommonActions/App';\r\nimport { AxiosError } from 'axios';\r\nimport { ResponseType } from '../api/types';\r\n\r\n// original type:\r\n// BaseThunkAPI<S, E, D extends Dispatch = Dispatch, RejectedValue = undefined>\r\ntype ThunkAPIType = {\r\n    dispatch: (action: any) => any\r\n    rejectWithValue: Function\r\n}\r\n\r\nexport const handleAsyncServerAppError = <D>(data: ResponseType<D>,\r\n                                             thunkAPI: ThunkAPIType,\r\n                                             showError = true) => {\r\n    if (showError) {\r\n        thunkAPI.dispatch(appActions.setAppError({error: data.messages.length ? data.messages[0] : 'Some error occurred'}))\r\n    }\r\n    thunkAPI.dispatch(appActions.setAppStatus({status: 'failed'}))\r\n    return thunkAPI.rejectWithValue({errors: data.messages, fieldsErrors: data.fieldsErrors})\r\n}\r\n\r\nexport const handleAsyncServerNetworkError = (error: AxiosError,\r\n                                              thunkAPI: ThunkAPIType,\r\n                                              showError = true) => {\r\n    if (showError) {\r\n        thunkAPI.dispatch(appActions.setAppError({error: error.message ? error.message : 'Some error occurred'}))\r\n    }\r\n    thunkAPI.dispatch(appActions.setAppStatus({status: 'failed'}))\r\n\r\n    return thunkAPI.rejectWithValue({errors: [error.message], fieldsErrors: undefined})\r\n}\r\n","import { todolistsAPI } from '../../api/todolists-api';\r\nimport { RequestStatusType } from '../Application';\r\nimport { appActions } from '../CommonActions/App';\r\nimport { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';\r\nimport { handleAsyncServerAppError, handleAsyncServerNetworkError } from '../../utils/error-utils';\r\nimport { TodolistType } from '../../api/types';\r\nimport { ThunkError } from '../../utils/types';\r\n\r\nconst {setAppStatus} = appActions\r\n\r\nconst fetchTodolistsTC = createAsyncThunk<{ todolists: TodolistType[] }, undefined, ThunkError>('todolists/fetchTodolists', async (param, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatus({status: 'loading'}))\r\n    try {\r\n        const res = await todolistsAPI.getTodolists()\r\n        thunkAPI.dispatch(setAppStatus({status: 'succeeded'}))\r\n        return {todolists: res.data}\r\n    } catch (error) {\r\n        return handleAsyncServerNetworkError(error, thunkAPI)\r\n    }\r\n})\r\nconst removeTodolistTC = createAsyncThunk<{ id: string }, string, ThunkError>('todolists/removeTodolist', async (todolistId, {dispatch, rejectWithValue}) => {\r\n    //изменим глобальный статус приложения, чтобы вверху полоса побежала\r\n    dispatch(setAppStatus({status: 'loading'}))\r\n    //изменим статус конкретного тудулиста, чтобы он мог задизеблить что надо\r\n    dispatch(changeTodolistEntityStatus({id: todolistId, status: 'loading'}))\r\n    await todolistsAPI.deleteTodolist(todolistId)\r\n    //скажем глобально приложению, что асинхронная операция завершена\r\n    dispatch(setAppStatus({status: 'succeeded'}))\r\n    return {id: todolistId}\r\n})\r\nconst addTodolistTC = createAsyncThunk<{ todolist: TodolistType }, string, ThunkError>\r\n('todolists/addTodolist', async (title, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatus({status: 'loading'}))\r\n    try {\r\n        const res = await todolistsAPI.createTodolist(title)\r\n        if (res.data.resultCode === 0) {\r\n            thunkAPI.dispatch(setAppStatus({status: 'succeeded'}))\r\n            return {todolist: res.data.data.item}\r\n        } else {\r\n            return handleAsyncServerAppError(res.data, thunkAPI, false)\r\n        }\r\n    } catch (error) {\r\n        return handleAsyncServerNetworkError(error, thunkAPI, false)\r\n    }\r\n})\r\nconst changeTodolistTitleTC = createAsyncThunk('todolists/changeTodolistTitle', async (param: { id: string, title: string }, thunkAPI) => {\r\n    try {\r\n        const res = await todolistsAPI.updateTodolist(param.id, param.title)\r\n        if (res.data.resultCode === 0) {\r\n            thunkAPI.dispatch(setAppStatus({status: 'succeeded'}))\r\n            return {id: param.id, title: param.title}\r\n        } else {\r\n            return handleAsyncServerAppError(res.data, thunkAPI)\r\n        }\r\n    } catch (error) {\r\n        return handleAsyncServerNetworkError(error, thunkAPI, false)\r\n    }\r\n})\r\n\r\nexport const asyncActions = {\r\n    fetchTodolistsTC,\r\n    removeTodolistTC,\r\n    addTodolistTC,\r\n    changeTodolistTitleTC\r\n}\r\n\r\nexport const slice = createSlice({\r\n    name: 'todolists',\r\n    initialState: [] as Array<TodolistDomainType>,\r\n    reducers: {\r\n        changeTodolistFilter(state, action: PayloadAction<{ id: string, filter: FilterValuesType }>) {\r\n            const index = state.findIndex(tl => tl.id === action.payload.id)\r\n            state[index].filter = action.payload.filter\r\n        },\r\n        changeTodolistEntityStatus(state, action: PayloadAction<{ id: string, status: RequestStatusType }>) {\r\n            const index = state.findIndex(tl => tl.id === action.payload.id)\r\n            state[index].entityStatus = action.payload.status\r\n        }\r\n    },\r\n    extraReducers: builder => {\r\n        builder\r\n            .addCase(fetchTodolistsTC.fulfilled, (state, action) => {\r\n                return action.payload.todolists.map((tl) => ({...tl, filter: 'all', entityStatus: 'idle'}))\r\n            })\r\n            .addCase(removeTodolistTC.fulfilled, (state, action) => {\r\n                const index = state.findIndex(tl => tl.id === action.payload.id)\r\n                if (index > -1) {\r\n                    state.splice(index, 1)\r\n                }\r\n            })\r\n            .addCase(addTodolistTC.fulfilled, (state, action) => {\r\n                state.unshift({...action.payload.todolist, filter: 'all', entityStatus: 'idle'})\r\n            })\r\n            .addCase(changeTodolistTitleTC.fulfilled, (state, action) => {\r\n                const index = state.findIndex(tl => tl.id === action.payload.id)\r\n                state[index].title = action.payload.title\r\n            })\r\n    }\r\n})\r\n\r\nexport const {changeTodolistFilter, changeTodolistEntityStatus} = slice.actions\r\n\r\nexport type FilterValuesType = 'all' | 'active' | 'completed';\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n}\r\n","import {todolistsAPI} from '../../api/todolists-api'\r\nimport {createAsyncThunk, createSlice} from '@reduxjs/toolkit'\r\nimport {appActions} from '../CommonActions/App'\r\nimport {handleAsyncServerAppError, handleAsyncServerNetworkError} from '../../utils/error-utils'\r\nimport {asyncActions as asyncTodolistsActions} from './todolists-reducer'\r\nimport {AppRootStateType, ThunkError} from '../../utils/types'\r\nimport {TaskPriorities, TaskStatuses, TaskType, UpdateTaskModelType} from '../../api/types'\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nexport const fetchTasks = createAsyncThunk<{ tasks: TaskType[], todolistId: string }, string, ThunkError>('tasks/fetchTasks', async (todolistId, thunkAPI) => {\r\n    thunkAPI.dispatch(appActions.setAppStatus({status: 'loading'}))\r\n    try {\r\n        const res = await todolistsAPI.getTasks(todolistId)\r\n        const tasks = res.data.items\r\n        thunkAPI.dispatch(appActions.setAppStatus({status: 'succeeded'}))\r\n        return {tasks, todolistId}\r\n    } catch (error) {\r\n        return handleAsyncServerNetworkError(error, thunkAPI)\r\n    }\r\n})\r\nexport const removeTask = createAsyncThunk<{ taskId: string, todolistId: string }, { taskId: string, todolistId: string }, ThunkError>('tasks/removeTask',\r\n    async (param, thunkAPI) => {\r\n        await todolistsAPI.deleteTask(param.todolistId, param.taskId)\r\n        return {taskId: param.taskId, todolistId: param.todolistId}\r\n    })\r\nexport const addTask = createAsyncThunk<TaskType, { title: string, todolistId: string }, ThunkError>('tasks/addTask',\r\n    async (param, thunkAPI) => {\r\n        thunkAPI.dispatch(appActions.setAppStatus({status: 'loading'}))\r\n        try {\r\n            const res = await todolistsAPI.createTask(param.todolistId, param.title)\r\n            if (res.data.resultCode === 0) {\r\n                thunkAPI.dispatch(appActions.setAppStatus({status: 'succeeded'}))\r\n                return res.data.data.item\r\n            } else {\r\n                handleAsyncServerAppError(res.data, thunkAPI, false)\r\n                return thunkAPI.rejectWithValue({errors: res.data.messages, fieldsErrors: res.data.fieldsErrors})\r\n            }\r\n        } catch (err) {\r\n            return handleAsyncServerNetworkError(err, thunkAPI, false)\r\n        }\r\n    })\r\nexport const updateTask = createAsyncThunk('tasks/updateTask', async (param: { taskId: string, model: UpdateDomainTaskModelType, todolistId: string },\r\n                                                                      thunkAPI) => {\r\n    const state = thunkAPI.getState() as AppRootStateType\r\n\r\n    const task = state.tasks[param.todolistId].find(t => t.id === param.taskId)\r\n    if (!task) {\r\n        return thunkAPI.rejectWithValue('task not found in the state')\r\n    }\r\n\r\n    const apiModel: UpdateTaskModelType = {\r\n        deadline: task.deadline,\r\n        description: task.description,\r\n        priority: task.priority,\r\n        startDate: task.startDate,\r\n        title: task.title,\r\n        status: task.status,\r\n        ...param.model\r\n    }\r\n\r\n    const res = await todolistsAPI.updateTask(param.todolistId, param.taskId, apiModel)\r\n    try {\r\n        if (res.data.resultCode === 0) {\r\n            return param\r\n        } else {\r\n            return handleAsyncServerAppError(res.data, thunkAPI)\r\n        }\r\n    } catch (error) {\r\n        return handleAsyncServerNetworkError(error, thunkAPI)\r\n    }\r\n})\r\n\r\nexport const asyncActions = {\r\n    fetchTasks,\r\n    removeTask,\r\n    addTask,\r\n    updateTask\r\n}\r\n\r\nexport const slice = createSlice({\r\n    name: 'tasks',\r\n    initialState,\r\n    reducers: {},\r\n    extraReducers: (builder) => {\r\n        builder\r\n            .addCase(asyncTodolistsActions.addTodolistTC.fulfilled, (state, action) => {\r\n                state[action.payload.todolist.id] = []\r\n            })\r\n            .addCase(asyncTodolistsActions.removeTodolistTC.fulfilled, (state, action) => {\r\n                delete state[action.payload.id]\r\n            })\r\n            .addCase(asyncTodolistsActions.fetchTodolistsTC.fulfilled, (state, action) => {\r\n                action.payload.todolists.forEach((tl: any) => {\r\n                    state[tl.id] = []\r\n                })\r\n            })\r\n            .addCase(fetchTasks.fulfilled, (state, action) => {\r\n                state[action.payload.todolistId] = action.payload.tasks\r\n            })\r\n            .addCase(removeTask.fulfilled, (state, action) => {\r\n                const tasks = state[action.payload.todolistId]\r\n                const index = tasks.findIndex(t => t.id === action.payload.taskId)\r\n                if (index > -1) {\r\n                    tasks.splice(index, 1)\r\n                }\r\n            })\r\n            .addCase(addTask.fulfilled, (state, action) => {\r\n                state[action.payload.todoListId].unshift(action.payload)\r\n            })\r\n            .addCase(updateTask.fulfilled, (state, action) => {\r\n                const tasks = state[action.payload.todolistId]\r\n                const index = tasks.findIndex(t => t.id === action.payload.taskId)\r\n                if (index > -1) {\r\n                    tasks[index] = {...tasks[index], ...action.payload.model}\r\n                }\r\n            })\r\n    }\r\n})\r\n\r\n// types\r\nexport type UpdateDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\n","import React, {ChangeEvent, KeyboardEvent, useState} from 'react'\r\nimport {IconButton, TextField} from '@material-ui/core'\r\nimport {AddBox} from '@material-ui/icons'\r\n\r\nexport type AddItemFormSubmitHelperType = { setError: (error: string) => void, setTitle: (title: string) => void}\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string, helper: AddItemFormSubmitHelperType) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const AddItemForm = React.memo(function ({addItem, disabled = false}: AddItemFormPropsType) {\r\n    let [title, setTitle] = useState('')\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addItemHandler = async () => {\r\n        if (title.trim() !== '') {\r\n                addItem(title, {setError, setTitle})\r\n        } else {\r\n            setError('Title is required')\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null)\r\n        }\r\n        if (e.charCode === 13) {\r\n            addItemHandler()\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <TextField variant=\"outlined\"\r\n                   disabled={disabled}\r\n                   error={!!error}\r\n                   value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   label=\"Title\"\r\n                   helperText={error}\r\n        />\r\n        <IconButton color=\"primary\" onClick={addItemHandler} disabled={disabled} style={{marginLeft: '5px'}}>\r\n            <AddBox/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, {ChangeEvent, useState} from 'react';\r\nimport {TextField} from '@material-ui/core';\r\n\r\ntype EditableSpanPropsType = {\r\n    value: string\r\n    onChange: (newValue: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo(function (props: EditableSpanPropsType) {\r\n    console.log(\"EditableSpan called\");\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [title, setTitle] = useState(props.value);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n        setTitle(props.value);\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n        props.onChange(title);\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return editMode\r\n        ?    <TextField value={title} onChange={changeTitle} autoFocus onBlur={activateViewMode} />\r\n        : <span onDoubleClick={activateEditMode}>{props.value}</span>\r\n});\r\n","import {useDispatch} from 'react-redux'\r\nimport {AppDispatchType} from './types'\r\nimport {ActionCreatorsMapObject, bindActionCreators} from 'redux'\r\nimport {useMemo} from 'react'\r\n\r\nexport const useAppDispatch = () => useDispatch<AppDispatchType>()\r\n\r\nexport function useActions<T extends ActionCreatorsMapObject<any>>(actions: T) {\r\n    const dispatch = useAppDispatch()\r\n\r\n    const boundActions = useMemo(() => {\r\n        return bindActionCreators(actions, dispatch)\r\n    }, [actions, dispatch])\r\n\r\n    return boundActions\r\n}\r\n","import React, { ChangeEvent, useCallback } from 'react';\r\nimport { Checkbox, IconButton } from '@material-ui/core';\r\nimport { EditableSpan } from '../../../../components/EditableSpan/EditableSpan';\r\nimport { Delete } from '@material-ui/icons';\r\nimport { tasksActions } from '../../index';\r\nimport { TaskStatuses, TaskType } from '../../../../api/types';\r\nimport { useActions } from '../../../../utils/redux-utils';\r\n\r\ntype TaskPropsType = {\r\n    task: TaskType\r\n    todolistId: string\r\n}\r\n\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    const {updateTask, removeTask} = useActions(tasksActions)\r\n\r\n    const onClickHandler = useCallback(() => removeTask({taskId: props.task.id, todolistId: props.todolistId}),\r\n        [removeTask, props.task.id, props.todolistId])\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        updateTask({\r\n            taskId: props.task.id,\r\n            model: {status: e.currentTarget.checked ? TaskStatuses.Completed : TaskStatuses.New},\r\n            todolistId: props.todolistId\r\n        })\r\n    }, [updateTask, props.task.id, props.todolistId])\r\n\r\n    const onTitleChangeHandler = useCallback((newValue: string) => {\r\n        updateTask({\r\n            taskId: props.task.id,\r\n            model: {title: newValue},\r\n            todolistId: props.todolistId\r\n        })\r\n    }, [updateTask, props.task.id, props.todolistId])\r\n\r\n    return <div key={props.task.id} className={props.task.status === TaskStatuses.Completed ? 'is-done' : ''}\r\n    style={{position: 'relative'}}>\r\n        <Checkbox\r\n            checked={props.task.status === TaskStatuses.Completed}\r\n            color=\"primary\"\r\n            onChange={onChangeHandler}\r\n        />\r\n\r\n        <EditableSpan value={props.task.title} onChange={onTitleChangeHandler}/>\r\n        <IconButton size={'small'} onClick={onClickHandler} style={{ position: 'absolute', top: '2px', right: '2px'} }>\r\n            <Delete fontSize={'small'}/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport {AddItemForm, AddItemFormSubmitHelperType} from '../../../components/AddItemForm/AddItemForm'\r\nimport {EditableSpan} from '../../../components/EditableSpan/EditableSpan'\r\nimport {Button, IconButton, Paper, PropTypes} from '@material-ui/core'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {Task} from './Task/Task'\r\nimport {FilterValuesType, TodolistDomainType} from '../todolists-reducer'\r\nimport {tasksActions, todolistsActions} from '../index'\r\nimport {TaskStatuses, TaskType} from '../../../api/types'\r\nimport {useActions, useAppDispatch} from '../../../utils/redux-utils'\r\n\r\ntype PropsType = {\r\n    todolist: TodolistDomainType\r\n    tasks: Array<TaskType>\r\n    demo?: boolean\r\n}\r\n\r\nexport const Todolist = React.memo(function ({demo = false, ...props}: PropsType) {\r\n    const {fetchTasks} = useActions(tasksActions)\r\n    const {changeTodolistFilter, removeTodolistTC, changeTodolistTitleTC} = useActions(todolistsActions)\r\n\r\n    const dispatch = useAppDispatch()\r\n\r\n    useEffect(() => {\r\n        if (demo) {\r\n            return\r\n        }\r\n        fetchTasks(props.todolist.id)\r\n    }, [demo, fetchTasks, props.todolist.id])\r\n\r\n    const addTaskCallback = useCallback(async (title: string, helper: AddItemFormSubmitHelperType) => {\r\n\r\n        let thunk = tasksActions.addTask({title: title, todolistId: props.todolist.id})\r\n        const resultAction = await dispatch(thunk)\r\n\r\n        if (tasksActions.addTask.rejected.match(resultAction)) {\r\n            if (resultAction.payload?.errors?.length) {\r\n                const errorMessage = resultAction.payload?.errors[0]\r\n                helper.setError(errorMessage)\r\n            } else {\r\n                helper.setError('Some error occured')\r\n            }\r\n        } else {\r\n            helper.setTitle('')\r\n        }\r\n\r\n    }, [props.todolist.id, dispatch])\r\n\r\n    const removeTodolist = () => {\r\n        removeTodolistTC(props.todolist.id)\r\n    }\r\n    const changeTodolistTitle = useCallback((title: string) => {\r\n        changeTodolistTitleTC({id: props.todolist.id, title: title})\r\n    }, [changeTodolistTitleTC, props.todolist.id])\r\n\r\n    const onFilterButtonClickHandler = useCallback((filter: FilterValuesType) => changeTodolistFilter({\r\n        filter: filter,\r\n        id: props.todolist.id\r\n    }), [changeTodolistFilter, props.todolist.id])\r\n\r\n    let tasksForTodolist = props.tasks\r\n\r\n    if (props.todolist.filter === 'active') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.todolist.filter === 'completed') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    const renderFilterButton = (buttonFilter: FilterValuesType,\r\n                                color: PropTypes.Color,\r\n                                text: string) => {\r\n        return <Button variant={props.todolist.filter === buttonFilter ? 'outlined' : 'text'}\r\n                       onClick={() => onFilterButtonClickHandler(buttonFilter)}\r\n                       color={color}>{text}\r\n        </Button>\r\n    }\r\n\r\n    return <Paper style={{padding: '10px', position: 'relative'}}>\r\n        <IconButton\r\n            size={'small'}\r\n            onClick={removeTodolist} disabled={props.todolist.entityStatus === 'loading'}\r\n                    style={{position: 'absolute', right: '5px', top: '5px'}}\r\n        >\r\n            <Delete fontSize={'small'}/>\r\n        </IconButton>\r\n        <h3>\r\n            <EditableSpan value={props.todolist.title} onChange={changeTodolistTitle}/>\r\n        </h3>\r\n        <AddItemForm addItem={addTaskCallback} disabled={props.todolist.entityStatus === 'loading'}/>\r\n        <div>\r\n            {\r\n                tasksForTodolist.map(t => <Task key={t.id} task={t} todolistId={props.todolist.id}/>)\r\n            }\r\n            {!tasksForTodolist.length && <div style={{padding: '10px', color: 'grey'}}>No task</div>}\r\n        </div>\r\n        <div style={{paddingTop: '10px'}}>\r\n            {renderFilterButton('all', 'default', 'All')}\r\n            {renderFilterButton('active', 'primary', 'Active')}\r\n            {renderFilterButton('completed', 'secondary', 'Completed')}\r\n        </div>\r\n    </Paper>\r\n})\r\n\r\n\r\n\r\n","import {AppRootStateType} from '../../utils/types'\r\n\r\nexport const selectIsLoggedIn = (state: AppRootStateType) => state.auth.isLoggedIn\r\n","import React, { useCallback, useEffect } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { TodolistDomainType } from './todolists-reducer';\r\nimport { TasksStateType } from './tasks-reducer';\r\nimport { Grid } from '@material-ui/core';\r\nimport { AddItemForm, AddItemFormSubmitHelperType } from '../../components/AddItemForm/AddItemForm';\r\nimport { Todolist } from './Todolist/Todolist';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { selectIsLoggedIn } from '../Auth/selectors';\r\nimport { todolistsActions } from './index';\r\nimport { AppRootStateType } from '../../utils/types';\r\nimport { useActions, useAppDispatch } from '../../utils/redux-utils';\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nexport const TodolistsList: React.FC<PropsType> = ({demo = false}) => {\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n    const isLoggedIn = useSelector(selectIsLoggedIn)\r\n\r\n    const dispatch = useAppDispatch()\r\n\r\n    const {fetchTodolistsTC} = useActions(todolistsActions)\r\n\r\n    const addTodolistCallback = useCallback(async (title: string, helper: AddItemFormSubmitHelperType) => {\r\n        let thunk = todolistsActions.addTodolistTC(title)\r\n        const resultAction = await dispatch(thunk)\r\n\r\n        if (todolistsActions.addTodolistTC.rejected.match(resultAction)) {\r\n            if (resultAction.payload?.errors?.length) {\r\n                const errorMessage = resultAction.payload?.errors[0]\r\n                helper.setError(errorMessage)\r\n            } else {\r\n                helper.setError('Some error occured')\r\n            }\r\n        } else {\r\n            helper.setTitle('')\r\n        }\r\n    }, [dispatch])\r\n\r\n\r\n    useEffect(() => {\r\n        if (demo || !isLoggedIn) {\r\n            return\r\n        }\r\n        fetchTodolistsTC()\r\n    }, [demo, isLoggedIn, fetchTodolistsTC])\r\n\r\n\r\n    if (!isLoggedIn) {\r\n        return <Redirect to={'/login'}/>\r\n    }\r\n\r\n    return <>\r\n        <Grid container style={{padding: '20px'}}>\r\n            <AddItemForm addItem={addTodolistCallback}/>\r\n        </Grid>\r\n        <Grid container spacing={3} style={{flexWrap: 'nowrap', overflowX: 'scroll'}}>\r\n            {\r\n                todolists.map(tl => {\r\n                    let allTodolistTasks = tasks[tl.id]\r\n\r\n                    return <Grid item key={tl.id}>\r\n                        <div style={{width: '300px'}}>\r\n                            <Todolist\r\n                                todolist={tl}\r\n                                tasks={allTodolistTasks}\r\n                                demo={demo}\r\n                            />\r\n                        </div>\r\n                    </Grid>\r\n                })\r\n            }\r\n        </Grid>\r\n    </>\r\n}\r\n","import {asyncActions as todolistsAsyncActions, slice as todolistsSlice} from './todolists-reducer'\r\nimport {asyncActions as tasksAsyncActions, slice as tasksSlice} from './tasks-reducer'\r\nimport {TodolistsList} from './TodolistsList'\r\n\r\nconst todolistsActions = {\r\n    ...todolistsAsyncActions,\r\n    ...todolistsSlice.actions\r\n}\r\nconst tasksActions = {\r\n    ...tasksAsyncActions,\r\n    ...tasksSlice.actions\r\n}\r\n\r\nconst todolistsReducer  = todolistsSlice.reducer\r\nconst tasksReducer  = tasksSlice.reducer\r\n\r\nexport {\r\n    tasksActions,\r\n    todolistsActions,\r\n    TodolistsList,\r\n    todolistsReducer,\r\n    tasksReducer\r\n}\r\n","import React from 'react'\r\nimport Snackbar from '@material-ui/core/Snackbar'\r\nimport MuiAlert, {AlertProps} from '@material-ui/lab/Alert'\r\nimport {useSelector} from 'react-redux'\r\nimport {appActions} from '../../features/CommonActions/App'\r\nimport {AppRootStateType} from '../../utils/types'\r\nimport {useActions} from '../../utils/redux-utils'\r\n\r\nfunction Alert(props: AlertProps) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />\r\n}\r\n\r\nexport function ErrorSnackbar() {\r\n    //const [open, setOpen] = React.useState(true)\r\n    const error = useSelector<AppRootStateType, string | null>(state => state.app.error);\r\n    const {setAppError} = useActions(appActions)\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return\r\n        }\r\n        setAppError({error: null});\r\n    }\r\n\r\n\r\n    const isOpen = error !== null;\r\n\r\n    return (\r\n        <Snackbar open={isOpen} autoHideDuration={6000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\">\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    )\r\n}\r\n","import {AppRootStateType} from '../../utils/types'\r\n\r\nexport const selectStatus = (state: AppRootStateType) => state.app.status\r\nexport const selectIsInitialized = (state: AppRootStateType) => state.app.isInitialized\r\n","import {authAPI} from '../../api/todolists-api'\r\nimport {handleAsyncServerAppError, handleAsyncServerNetworkError} from '../../utils/error-utils'\r\nimport {createAsyncThunk, createSlice, PayloadAction} from '@reduxjs/toolkit'\r\nimport {FieldErrorType, LoginParamsType} from '../../api/types'\r\nimport {appActions} from '../CommonActions/App'\r\n\r\nconst {setAppStatus} = appActions\r\n\r\nexport const login = createAsyncThunk<undefined, LoginParamsType,\r\n    { rejectValue: { errors: Array<string>, fieldsErrors?: Array<FieldErrorType> } }>('auth/login', async (param, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatus({status: 'loading'}))\r\n    try {\r\n        const res = await authAPI.login(param)\r\n        if (res.data.resultCode === 0) {\r\n            thunkAPI.dispatch(setAppStatus({status: 'succeeded'}))\r\n            return\r\n        } else {\r\n            return handleAsyncServerAppError(res.data, thunkAPI)\r\n        }\r\n    } catch (error) {\r\n        return handleAsyncServerNetworkError(error, thunkAPI)\r\n    }\r\n})\r\nexport const logout = createAsyncThunk('auth/logout', async (param, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatus({status: 'loading'}))\r\n    try {\r\n        const res = await authAPI.logout()\r\n        if (res.data.resultCode === 0) {\r\n            thunkAPI.dispatch(setAppStatus({status: 'succeeded'}))\r\n            return\r\n        } else {\r\n            return handleAsyncServerAppError(res.data, thunkAPI)\r\n        }\r\n    } catch (error) {\r\n        return handleAsyncServerNetworkError(error, thunkAPI)\r\n    }\r\n})\r\n\r\nexport const asyncActions = {\r\n    login,\r\n    logout\r\n}\r\n\r\nexport const slice = createSlice({\r\n    name: 'auth',\r\n    initialState: {\r\n        isLoggedIn: false\r\n    },\r\n    reducers: {\r\n        setIsLoggedIn(state, action: PayloadAction<{ value: boolean }>) {\r\n            state.isLoggedIn = action.payload.value\r\n        }\r\n    },\r\n    extraReducers: builder => {\r\n        builder\r\n            .addCase(login.fulfilled, (state) => {\r\n                state.isLoggedIn = true\r\n            })\r\n            .addCase(logout.fulfilled, (state) => {\r\n                state.isLoggedIn = false\r\n            })\r\n    }\r\n})\r\n\r\nexport const authReducer = slice.reducer\r\nexport const {setIsLoggedIn} = slice.actions\r\n\r\n\r\n","import React from 'react';\r\nimport {\r\n  Button,\r\n  Checkbox,\r\n  FormControl,\r\n  FormControlLabel,\r\n  FormGroup,\r\n  FormLabel,\r\n  Grid,\r\n  TextField,\r\n} from '@material-ui/core';\r\nimport { FormikHelpers, useFormik } from 'formik';\r\nimport { useSelector } from 'react-redux';\r\nimport { login } from './auth-reducer';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { selectIsLoggedIn } from './selectors';\r\nimport { authActions } from './index';\r\nimport { useAppDispatch } from '../../utils/redux-utils';\r\n\r\ntype FormValuesType = {\r\n  email: string\r\n  password: string\r\n  rememberMe: boolean\r\n}\r\n\r\nexport const Login = () => {\r\n  const dispatch = useAppDispatch();\r\n\r\n  const isLoggedIn = useSelector(selectIsLoggedIn);\r\n\r\n  const formik = useFormik({\r\n    validate: (values) => {\r\n      if (!values.email) {\r\n        return {\r\n          email: 'Email is required',\r\n        };\r\n      }\r\n      if (!values.password) {\r\n        return {\r\n          password: 'Password is required',\r\n        };\r\n      }\r\n\r\n    },\r\n    initialValues: {\r\n      email: 'kysapka@gmail.com',\r\n      password: 'Qw234567',\r\n      rememberMe: false,\r\n    },\r\n    onSubmit: async (values: FormValuesType, formikHelpers: FormikHelpers<FormValuesType>) => {\r\n      const resultAction = await dispatch(authActions.login(values));\r\n\r\n      if (login.rejected.match(resultAction)) {\r\n        if (resultAction.payload?.fieldsErrors?.length) {\r\n          const error = resultAction.payload?.fieldsErrors[0];\r\n          formikHelpers.setFieldError(error.field, error.error);\r\n        }\r\n      }\r\n    },\r\n  });\r\n\r\n  if (isLoggedIn) {\r\n    return <Redirect to={'/'} />;\r\n  }\r\n\r\n\r\n  return <Grid container justify='center'>\r\n    <Grid item xs={4}>\r\n      <form onSubmit={formik.handleSubmit}>\r\n        <FormControl>\r\n          <FormLabel>\r\n            <p>\r\n              To log in get registered <a href={'https://social-network.samuraijs.com/'}>here</a>\r\n            </p>\r\n            <p>\r\n              or use common test account credentials:\r\n            </p>\r\n            <p> Email: free@samuraijs.com\r\n            </p>\r\n            <p>\r\n              Password: free\r\n            </p>\r\n          </FormLabel>\r\n          <FormGroup>\r\n            <TextField\r\n              label='Email'\r\n              margin='normal'\r\n              {...formik.getFieldProps('email')}\r\n            />\r\n            {formik.errors.email ? <div>{formik.errors.email}</div> : null}\r\n            <TextField\r\n              type='password'\r\n              label='Password'\r\n              margin='normal'\r\n              {...formik.getFieldProps('password')}\r\n            />\r\n            {formik.errors.password ? <div>{formik.errors.password}</div> : null}\r\n            <FormControlLabel\r\n              label={'Remember me'}\r\n              control={<Checkbox\r\n                {...formik.getFieldProps('rememberMe')}\r\n                checked={formik.values.rememberMe}\r\n              />}\r\n            />\r\n            <Button type={'submit'} variant={'contained'} color={'primary'}>Login</Button>\r\n          </FormGroup>\r\n        </FormControl>\r\n      </form>\r\n    </Grid>\r\n  </Grid>;\r\n};\r\n","import * as authSelectors from './selectors'\r\nimport {Login} from './Login'\r\nimport {asyncActions, slice} from './auth-reducer'\r\n\r\nconst authActions = {\r\n    ...asyncActions,\r\n    ...slice.actions\r\n}\r\n\r\nconst authReducer = slice.reducer\r\n\r\nexport {\r\n    authSelectors,\r\n    Login,\r\n    authActions,\r\n    authReducer\r\n}\r\n","import { authAPI } from '../../api/todolists-api';\r\nimport { authActions } from '../Auth';\r\nimport { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\r\nimport { appActions } from '../CommonActions/App';\r\n\r\nconst initializeApp = createAsyncThunk('application/initializeApp', async (param, {dispatch}) => {\r\n    const res = await authAPI.me()\r\n    if (res.data.resultCode === 0) {\r\n        dispatch(authActions.setIsLoggedIn({value: true}))\r\n    } else {\r\n\r\n    }\r\n})\r\n\r\nexport const asyncActions = {\r\n    initializeApp\r\n}\r\n\r\nexport const slice = createSlice({\r\n    name: 'app',\r\n    initialState: {\r\n        status: 'idle',\r\n        error: null,\r\n        isInitialized: false\r\n    } as InitialStateType,\r\n    reducers: {},\r\n    extraReducers: builder => {\r\n        builder\r\n            .addCase(initializeApp.fulfilled, (state, action) => {\r\n                state.isInitialized = true\r\n            })\r\n            .addCase(appActions.setAppStatus, (state, action) => {\r\n                state.status = action.payload.status\r\n            })\r\n            .addCase(appActions.setAppError, (state, action) => {\r\n                state.error = action.payload.error\r\n            })\r\n    }\r\n})\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\nexport type InitialStateType = {\r\n    // происходит ли сейчас взаимодействие с сервером\r\n    status: RequestStatusType\r\n    // если ошибка какая-то глобальная произойдёт - мы запишем текст ошибки сюда\r\n    error: string | null\r\n    // true когда приложение проинициализировалось (проверили юзера, настройки получили и т.д.)\r\n    isInitialized: boolean\r\n}\r\n","import * as appSelectors from './selectors'\r\nimport {RequestStatusType as T1, slice} from './application-reducer'\r\nimport {asyncActions} from './application-reducer'\r\n\r\nconst appReducer = slice.reducer\r\nconst actions = slice.actions\r\n\r\nconst appActions = {\r\n    ...actions,\r\n    ...asyncActions\r\n}\r\nexport type RequestStatusType = T1\r\n\r\nexport {\r\n    appSelectors,\r\n    appReducer,\r\n    appActions\r\n}\r\n","import React, { useCallback, useEffect } from 'react';\r\nimport './App.css';\r\nimport {\r\n    AppBar,\r\n    Button,\r\n    CircularProgress,\r\n    Container,\r\n    IconButton,\r\n    LinearProgress,\r\n    Toolbar,\r\n    Typography,\r\n} from '@material-ui/core';\r\nimport { Menu } from '@material-ui/icons';\r\nimport { TodolistsList } from '../features/TodolistsList';\r\nimport { ErrorSnackbar } from '../components/ErrorSnackbar/ErrorSnackbar';\r\nimport { useSelector } from 'react-redux';\r\nimport { appActions } from '../features/Application';\r\nimport { Route } from 'react-router-dom';\r\nimport { authActions, authSelectors, Login } from '../features/Auth';\r\nimport { selectIsInitialized, selectStatus } from '../features/Application/selectors';\r\nimport { useActions } from '../utils/redux-utils';\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nfunction App({demo = false}: PropsType) {\r\n    const status = useSelector(selectStatus)\r\n    const isInitialized = useSelector(selectIsInitialized)\r\n    const isLoggedIn = useSelector(authSelectors.selectIsLoggedIn)\r\n\r\n    const {logout} = useActions(authActions)\r\n    const {initializeApp} = useActions(appActions)\r\n\r\n    useEffect(() => {\r\n        if (!demo) {\r\n            initializeApp()\r\n        }\r\n    }, [demo, initializeApp])\r\n\r\n    const logoutHandler = useCallback(() => {\r\n        logout()\r\n    }, [logout])\r\n\r\n    if (!isInitialized) {\r\n        return <div\r\n            style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\r\n            <CircularProgress/>\r\n        </div>\r\n    }\r\n\r\n    return (\r\n            <div className=\"App\">\r\n                <ErrorSnackbar/>\r\n                <AppBar position=\"static\">\r\n                    <Toolbar>\r\n                        <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                            <Menu/>\r\n                        </IconButton>\r\n                        <Typography variant=\"h6\">\r\n                            News\r\n                        </Typography>\r\n                        {isLoggedIn && <Button color=\"inherit\" onClick={logoutHandler}>Log out</Button>}\r\n                    </Toolbar>\r\n                    {status === 'loading' && <LinearProgress/>}\r\n                </AppBar>\r\n                <Container fixed>\r\n                    <Route exact path={'/'} render={() => <TodolistsList demo={demo}/>}/>\r\n                    <Route path={'/login'} render={() => <Login/>}/>\r\n                </Container>\r\n            </div>\r\n    )\r\n}\r\n\r\nexport default App\r\n","import {combineReducers} from 'redux'\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport {appReducer} from '../features/Application'\r\nimport {authReducer} from '../features/Auth'\r\nimport {tasksReducer, todolistsReducer} from '../features/TodolistsList'\r\nimport {configureStore} from '@reduxjs/toolkit'\r\n\r\n// объединяя reducer-ы с помощью combineReducers,\r\n// мы задаём структуру нашего единственного объекта-состояния\r\nexport const rootReducer = combineReducers({\r\n    app: appReducer,\r\n    auth: authReducer,\r\n    todolists: todolistsReducer,\r\n    tasks: tasksReducer\r\n})\r\n// непосредственно создаём store\r\n//export const store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\r\n\r\nexport const store = configureStore({\r\n    reducer: rootReducer,\r\n    middleware: getDefaultMiddleware => getDefaultMiddleware().prepend(thunkMiddleware)\r\n})\r\n\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\r\n// @ts-ignore\r\nwindow.store = store\r\n\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport App from './app/App';\r\nimport { store } from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport { HashRouter } from 'react-router-dom';\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <HashRouter>\r\n            <App />\r\n        </HashRouter>\r\n    </Provider>, document.getElementById('root'))\r\n\r\n// If you want your appActions to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister()\r\n"],"sourceRoot":""}