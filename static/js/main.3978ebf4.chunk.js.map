{"version":3,"sources":["components/AddItemForm.tsx","EditableSpan.tsx","Todolist.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["AddItemForm","props","useState","title","setTitle","error","setError","onChangeHandler","e","currentTarget","value","onKeyPressHandler","key","addTask","trim","addItem","TextField","id","label","helperText","variant","onChange","onKeyPress","size","Button","color","onClick","EditableSpan","editMode","setEditMode","autoFocus","onBlur","Typography","onDoubleClick","component","Todolist","changeTodoListTitle","todolistID","IconButton","aria-label","deleteTodoList","Delete","tasks","map","t","className","isDone","Checkbox","changeTaskStatus","checked","defaultChecked","inputProps","changeTaskTitle","todoListID","tID","removeTask","filter","changeFilter","App","classes","makeStyles","theme","createStyles","root","flexGrow","menuButton","marginRight","spacing","useStyles","initTodoListState","v1","JSON","parse","localStorage","getItem","initTasksState","todoLists","setTodoLists","setTasks","tl","newTask","removeItem","setItem","stringify","console","log","updatedTasks","ts","changeStatus","taskId","updatedTodoList","taskID","AppBar","position","style","marginBottom","Toolbar","edge","Box","mt","Container","fixed","newTodoList","Grid","container","tasksForTodolist","item","xs","Paper","padding","display","justifyContent","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.3978ebf4.chunk.js","sourcesContent":["import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\nimport {Button, TextField} from \"@material-ui/core\";\r\n\r\n\r\ntype AddItemForm = {\r\n    addItem: (title: string) => void\r\n}\r\nexport const AddItemForm = (props: AddItemForm) => {\r\n\r\n    let [title, setTitle] = useState(\"\")\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        setError(null);\r\n        if (e.key === 'Enter') {\r\n            addTask();\r\n            setTitle('')\r\n        }\r\n    }\r\n\r\n    const addTask = () => {\r\n        if (title.trim() !== \"\") {\r\n            props.addItem(title.trim());\r\n            setTitle('')\r\n        } else {\r\n            setError(\"Title is required\");\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {!error\r\n                ? <TextField\r\n                    value={title}\r\n                    id=\"outlined-basic\"\r\n                    label=\"Add task...\"\r\n                    variant=\"outlined\"\r\n                    onChange={onChangeHandler}\r\n                    onKeyPress={onKeyPressHandler}\r\n                    size=\"small\"\r\n                />\r\n                : <TextField\r\n                    value={title}\r\n                    id=\"standard-error-helper-text\"\r\n                    label=\"Error...\"\r\n                    helperText={error}\r\n                    variant=\"outlined\"\r\n                    onChange={onChangeHandler}\r\n                    onKeyPress={onKeyPressHandler}\r\n                    error\r\n                    size=\"small\"\r\n                />}\r\n            <Button variant=\"contained\" size=\"medium\" color=\"primary\" onClick={addTask}>+</Button>\r\n        </div>\r\n    )\r\n}","import React, {ChangeEvent, useState} from \"react\";\r\nimport {TextField, Typography} from \"@material-ui/core\";\r\n\r\ntype EditableSpanProps = {\r\n    title: string\r\n    onChange: (title: string) => void\r\n}\r\nexport const EditableSpan = (props: EditableSpanProps) => {\r\n\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n    const [title, setTitle] = useState<string>(props.title ? props.title : '')\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n    const activateViewMode = () => {\r\n        props.onChange(title)\r\n        setEditMode(false)\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return editMode ?\r\n        <TextField\r\n                id=\"outlined-basic\"\r\n                label=\"Change task title\"\r\n                variant=\"outlined\"\r\n                autoFocus={true}\r\n                onChange={onChangeHandler}\r\n                onBlur={activateViewMode}\r\n                size=\"small\"\r\n            />\r\n        : <Typography onDoubleClick={activateEditMode} variant=\"h6\" component=\"span\">\r\n            {props.title}\r\n        </Typography>\r\n}","import React, {ChangeEvent} from 'react';\r\nimport {FilterValuesType} from './App';\r\nimport {AddItemForm} from \"./components/AddItemForm\";\r\nimport {EditableSpan} from \"./EditableSpan\";\r\nimport {Button, Checkbox, IconButton, Typography} from \"@material-ui/core\";\r\nimport {Delete} from \"@material-ui/icons\";\r\n\r\ntype TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\n\r\ntype PropsType = {\r\n    todolistID: string\r\n    title: string\r\n    deleteTodoList: (todolistID: string) => void\r\n    tasks: Array<TaskType>\r\n    removeTask: (todolistID: string, taskId: string) => void\r\n    changeFilter: (todolistID: string, value: FilterValuesType) => void\r\n    addTask: (todolistID: string, title: string) => void\r\n    changeTaskStatus: (todolistID: string, taskId: string, isDone: boolean) => void\r\n    changeTodoListTitle: (todolistID: string, title: string) => void\r\n    changeTaskTitle: (todolistID: string, taskId: string, title: string) => void\r\n    filter: FilterValuesType\r\n}\r\n\r\nexport function Todolist(props: PropsType) {\r\n\r\n    const onAllClickHandler = () => props.changeFilter(props.todolistID, \"all\");\r\n    const onActiveClickHandler = () => props.changeFilter(props.todolistID, \"active\");\r\n    const onCompletedClickHandler = () => props.changeFilter(props.todolistID, \"completed\");\r\n\r\n    const onDeleteTodolistHandler = () => {\r\n        props.deleteTodoList(props.todolistID)\r\n    }\r\n\r\n    const addTaskHandler = (title: string) => {\r\n        props.addTask(props.todolistID, title)\r\n    }\r\n\r\n    const removeTaskHandler = (todoListID: string, tID: string) => {\r\n        props.removeTask(todoListID, tID)\r\n    }\r\n\r\n\r\n    return <div>\r\n        <Typography variant=\"h2\" component=\"span\">\r\n            <EditableSpan title={props.title} onChange={(title) => {\r\n                props.changeTodoListTitle(props.todolistID, title)\r\n            }}/>\r\n            <IconButton color=\"secondary\" aria-label=\"delete Todolist\" onClick={onDeleteTodolistHandler}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </Typography>\r\n        <AddItemForm addItem={addTaskHandler}/>\r\n\r\n        <ul>\r\n            {\r\n                props.tasks.map(t => {\r\n                    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n                        props.changeTaskStatus(props.todolistID, t.id, e.currentTarget.checked);\r\n                    }\r\n                    return (\r\n                        <li key={t.id} className={t.isDone ? \"is-done\" : \"\"}>\r\n                            <Checkbox\r\n                                onChange={onChangeHandler}\r\n                                defaultChecked={t.isDone}\r\n                                color=\"primary\"\r\n                                inputProps={{'aria-label': 'secondary checkbox'}}\r\n                            />\r\n                            <EditableSpan title={t.title}\r\n                                          onChange={(title) => props.changeTaskTitle(props.todolistID, t.id, title)}/>\r\n                            <IconButton onClick={() => {removeTaskHandler(props.todolistID, t.id)}} aria-label=\"delete task\" color=\"primary\">\r\n                                <Delete/>\r\n                            </IconButton>\r\n                        </li>\r\n                    )\r\n                })\r\n            }\r\n        </ul>\r\n        <div>\r\n            <Button size=\"small\" variant={props.filter === 'all' ? \"contained\" : \"outlined\"}  color={props.filter === 'all' ? \"secondary\" : \"primary\"} onClick={onAllClickHandler}>All</Button>\r\n            <Button size=\"small\" variant={props.filter === 'active' ? \"contained\" : \"outlined\"} color={props.filter === 'active' ? \"secondary\" : \"primary\"} onClick={onActiveClickHandler}>Active</Button>\r\n            <Button size=\"small\" variant={props.filter === 'completed' ? \"contained\" : \"outlined\"} color={props.filter === 'completed' ? \"secondary\" : \"primary\"} onClick={onCompletedClickHandler}>Completed</Button>\r\n\r\n        </div>\r\n    </div>\r\n}","import React, {useState} from 'react';\r\nimport './App.css';\r\nimport {Todolist} from './Todolist';\r\nimport {v1} from 'uuid';\r\nimport {AddItemForm} from \"./components/AddItemForm\";\r\n\r\n\r\nimport {createStyles, makeStyles, Theme} from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Button from '@material-ui/core/Button';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport {Box, Container, Grid, Paper} from \"@material-ui/core\";\r\n\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\";\r\n\r\nfunction App() {\r\n\r\n    const useStyles = makeStyles((theme: Theme) =>\r\n        createStyles({\r\n            root: {\r\n                flexGrow: 1,\r\n            },\r\n            menuButton: {\r\n                marginRight: theme.spacing(2),\r\n            },\r\n            title: {\r\n                flexGrow: 1,\r\n            },\r\n        }),\r\n    );\r\n    const classes = useStyles();\r\n\r\n    const todolistID_1 = v1()\r\n    const todolistID_2 = v1()\r\n\r\n    type todoListsType = Array<{ id: string, title: string, filter: FilterValuesType }>\r\n\r\n\r\n\r\n    let initTodoListState:todoListsType = JSON.parse(localStorage.getItem('TDL')!)\r\n    let initTasksState:tasksType  =  JSON.parse(localStorage.getItem('TSK')!)\r\n\r\n    const [todoLists, setTodoLists] = useState<todoListsType>(\r\n        initTodoListState ? initTodoListState : []\r\n    //     [\r\n    //     {id: todolistID_1, title: \"What to learn\", filter: \"all\"},\r\n    //     {id: todolistID_2, title: \"What to bye\", filter: \"all\"}\r\n    // ]\r\n    )\r\n\r\n    type tasksType = {\r\n        [todolistID: string]: Array<{ id: string, title: string, isDone: boolean }>\r\n    }\r\n\r\n\r\n\r\n    const [tasks, setTasks] = useState<tasksType>(\r\n         initTasksState ? initTasksState : {}\r\n    //     {\r\n    //     // [todolistID_1]: [\r\n    //     //     {id: v1(), title: \"HTML&CSS\", isDone: true},\r\n    //     //     {id: v1(), title: \"JS\", isDone: true},\r\n    //     //     {id: v1(), title: \"ReactJS\", isDone: false},\r\n    //     //     {id: v1(), title: \"Rest API\", isDone: false},\r\n    //     //     {id: v1(), title: \"GraphQL\", isDone: false},\r\n    //     // ],\r\n    //     // [todolistID_2]: [\r\n    //     //     {id: v1(), title: \"Fish\", isDone: true},\r\n    //     //     {id: v1(), title: \"Meet\", isDone: false},\r\n    //     //     {id: v1(), title: \"Books\", isDone: false},\r\n    //     //     {id: v1(), title: \"Milk\", isDone: true},\r\n    //     //     {id: v1(), title: \"Water\", isDone: false},\r\n    //     // ],\r\n    // }\r\n    )\r\n\r\n    function changeFilter(todolistID: string, value: FilterValuesType) {\r\n        setTodoLists(todoLists.map(tl => tl.id === todolistID ? {...tl, filter: value} : tl))\r\n    }\r\n\r\n    function addTask(todolistID: string, title: string) {\r\n\r\n        let newTask = {...tasks, [todolistID]: [...tasks[todolistID] ,{id: v1(), title, isDone: false}]}\r\n        setTasks(newTask)\r\n\r\n        localStorage.removeItem('TSK')\r\n        localStorage.setItem('TSK', JSON.stringify(newTask))\r\n    }\r\n\r\n    function removeTask(todolistID: string, id: string) {\r\n        console.log(todolistID, id)\r\n        let updatedTasks = {...tasks, [todolistID]: tasks[todolistID].filter(ts => ts.id !== id)}\r\n        setTasks({...updatedTasks})\r\n\r\n        localStorage.removeItem('TSK')\r\n        localStorage.setItem('TSK', JSON.stringify(updatedTasks))\r\n\r\n    }\r\n\r\n    function changeStatus(todolistID: string, taskId: string, isDone: boolean) {\r\n        setTasks({...tasks, [todolistID]: tasks[todolistID].map(ts => ts.id === taskId ? {...ts, isDone} : ts)})\r\n    }\r\n\r\n    const addTodoList = (title: string) => {\r\n        const todolistID = v1()\r\n        let newTodoList: todoListsType = [{id: todolistID, title, filter: \"all\"}, ...todoLists]\r\n        setTodoLists(newTodoList)\r\n        setTasks({...tasks, [todolistID]: []})\r\n\r\n        localStorage.removeItem('TDL')\r\n        localStorage.setItem('TDL', JSON.stringify(newTodoList))\r\n    }\r\n    const deleteTodoList = (todolistID: string) => {\r\n        let updatedTodoList = [...todoLists.filter(tl => tl.id !== todolistID)]\r\n        setTodoLists(updatedTodoList)\r\n        delete tasks[todolistID]\r\n        setTasks({...tasks})\r\n\r\n        localStorage.removeItem(`TDL`)\r\n        localStorage.setItem('TDL', JSON.stringify(updatedTodoList))\r\n        localStorage.removeItem('TSK')\r\n        localStorage.setItem('TSK', JSON.stringify({...tasks}))\r\n    }\r\n    const changeTodoListTitle = (todolistID: string, title: string) => {\r\n        setTodoLists(todoLists.map(tl => tl.id === todolistID ? {...tl, title} : tl))\r\n    }\r\n    const changeTaskTitle = (todolistID: string, taskID: string, title: string) => {\r\n        setTasks({...tasks, [todolistID]: tasks[todolistID].map(ts => ts.id === taskID ? {...ts, title} : ts)})\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <AppBar position=\"static\" style={{marginBottom: 20}}>\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" className={classes.menuButton} color=\"inherit\" aria-label=\"menu\">\r\n                        <MenuIcon/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\" className={classes.title}>\r\n                        My Todolist Project\r\n                    </Typography>\r\n                    <Button color=\"inherit\">Login</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n\r\n            <Box component=\"div\" mt={5}>\r\n                <Container fixed>\r\n                    <div style={{marginBottom: 20}}>\r\n                        <AddItemForm addItem={addTodoList}/>\r\n                    </div>\r\n                    <Grid container spacing={3}>\r\n                        {todoLists.map((tl) => {\r\n\r\n                            let tasksForTodolist = tasks[tl.id]\r\n\r\n                            if (tl.filter === \"active\") {\r\n                                tasksForTodolist = tasks[tl.id].filter(t => !t.isDone)\r\n                            }\r\n                            if (tl.filter === \"completed\") {\r\n                                tasksForTodolist = tasks[tl.id].filter(t => t.isDone)\r\n                            }\r\n\r\n                            return (\r\n                                <Grid item xs={3}>\r\n                                    <Paper style={{padding: 5, display: \"flex\", justifyContent: \"center\"}}>\r\n                                        <Todolist\r\n                                            todolistID={tl.id}\r\n                                            title={tl.title}\r\n                                            tasks={tasksForTodolist}\r\n                                            addTask={addTask}\r\n                                            removeTask={removeTask}\r\n                                            filter={tl.filter}\r\n                                            changeFilter={changeFilter}\r\n                                            changeTaskStatus={changeStatus}\r\n                                            changeTodoListTitle={changeTodoListTitle}\r\n                                            changeTaskTitle={changeTaskTitle}\r\n                                            deleteTodoList={deleteTodoList}/>\r\n                                    </Paper>\r\n                                </Grid>\r\n\r\n                            )\r\n                        })}\r\n                    </Grid>\r\n                </Container>\r\n            </Box>\r\n\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}