{"version":3,"sources":["api/todolists-api.ts","utils/error-utils.ts","utils/consts/global_consts.ts","features/TodolistsList/TasksReducer.ts","features/TodolistsList/TodolistReducer.ts","features/Login/AuthReducer.ts","app/AppReducer.ts","components/ErrorSnackbar/ErrorSnackbar.tsx","features/Login/Login.tsx","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","features/TodolistsList/Todolist/Task/Task.tsx","features/TodolistsList/Todolist/Todolist.tsx","features/TodolistsList/TodolistsList.tsx","app/App.tsx","app/store.ts","serviceWorker.ts","index.tsx"],"names":["taskStatuses","tasksPriorities","settings","withCredentials","headers","instance","axios","create","baseURL","todolistsAPI","get","title","post","id","put","todolistID","delete","todolistId","taskId","model","authAPI","authPayload","handleServerAppError","data","dispatch","messages","setAppErrorAC","setAppStatusAC","handleServerNetworkError","error","message","TDL_ACTIONS","TSK_ACTIONS","changeTaskEntityStatusAC","taskID","entityStatus","type","fetchTasksTC","todoListId","then","res","tasks","setTasksAC","items","removeTaskTC","addTaskTC","task","resultCode","item","catch","updateTaskTC","domainModel","getState","find","t","apiModel","deadline","description","priority","startDate","status","updateTaskAC","fetchTodolistsTC","todoLists","todos","forEach","tl","removeTodoListTC","removeTodoListAC","addTodoListTC","response","todolist","changeTodoListTitleTC","payload","changeTodoListTitleAC","initialState","isLoggedIn","setIsLoggedInAC","value","logoutTC","isInitialized","Alert","React","forwardRef","props","ref","elevation","variant","ErrorSnackbar","useDispatch","useSelector","state","app","handleClose","event","reason","Snackbar","anchorOrigin","vertical","horizontal","open","autoHideDuration","onClose","severity","Login","auth","formik","useFormik","initialValues","email","password","rememberMe","validate","values","errors","test","length","onSubmit","resetForm","to","Grid","container","justifyContent","handleSubmit","FormControl","FormLabel","href","target","rel","FormGroup","TextField","getFieldProps","onBlur","handleBlur","label","margin","touched","helperText","FormControlLabel","control","Checkbox","name","onChange","handleChange","color","AddItemForm","memo","addItem","disabled","useState","currentTitle","setCurrentTitle","setError","addItemHandler","trim","e","currentTarget","onKeyPress","key","size","IconButton","onClick","AddBox","EditableSpan","editMode","setEditMode","locTitle","setLocTitle","autoFocus","Typography","onDoubleClick","component","Task","todoList","td","filter","tsk","tId","changeTaskStatus","useCallback","checked","Completed","New","changeTaskTitle","removeTask","className","tsEntityStatus","tlEntityStatus","Delete","Todolist","demo","tasksState","onChangeTDlFilter","filterValue","onChangeTDlTitle","onDeleteTDl","addTaskHandler","map","Button","TodolistsList","todolistState","useEffect","addTodoList","style","padding","marginBottom","display","spacing","xs","Paper","minWidth","maxWidth","App","finally","position","top","textAlign","width","CircularProgress","Container","AppBar","Toolbar","alignItems","edge","LinearProgress","path","element","RootReducer","combineReducers","action","tdl","ts","reduce","acc","copyTasks","rootState","configureStore","reducer","middleware","getDefaultMiddleware","prepend","thunkMiddleware","concat","logger","window","store","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console"],"mappings":"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","file":"static/js/main.865b463d.chunk.js","sourcesContent":["import axios from 'axios';\n\nconst settings = {\n  withCredentials: true,\n  headers: {\n    'API-KEY': '9660a6e9-744c-4376-8717-32b82016bc28',\n  },\n};\nconst instance = axios.create({\n  baseURL: 'https://social-network.samuraijs.com/api/1.1/',\n  ...settings,\n});\n\nexport const todolistsAPI = {\n  getTodolist() {\n    return instance.get<Array<TodolistType>>('todo-lists', settings);\n  },\n  createTodolist(title: string) {\n    return instance.post<{ title: string }, ResponseType<{ item: TodolistType }>>(\n      'todo-lists',\n      { title },\n    );\n  },\n  updateTodolist(title: string, id: string) {\n    return instance.put<{ title: string }, ResponseType>(`todo-lists/${id}`, { title });\n  },\n  deleteTodolist(todolistID: string) {\n    return instance.delete<ResponseType>(`todo-lists/${todolistID}`);\n  },\n\n  getTasks(todolistID: string) {\n    return instance.get<GetTasksResponse>(`todo-lists/${todolistID}/tasks`);\n  },\n  createTask(title: string, todolistId: string) {\n    return instance.post<{ title: string }, ResponseType<{ item: TaskType }>>(\n      `todo-lists/${todolistId}/tasks`,\n      { title },\n    );\n  },\n  updateTask(todolistId: string, taskId: string, model: PayloadTaskType) {\n    return instance.put<PayloadTaskType, ResponseType<{ item: TaskType }>>(\n      `todo-lists/${todolistId}/tasks/${taskId}`,\n      model,\n    );\n  },\n  deleteTask(todolistId: string, taskId: string) {\n    return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`);\n  },\n};\n\nexport const authAPI = {\n  login(authPayload: AuthPayloadType) {\n    return instance.post<AuthPayloadType, ResponseType<{ userId: number }>>(\n      '/auth/login',\n      authPayload,\n    );\n  },\n  logout() {\n    return instance.delete<null, ResponseType>('/auth/login');\n  },\n  me() {\n    return instance.get<null, ResponseType<AuthResponseType>>('/auth/me');\n  },\n};\n\n// types\nexport enum taskStatuses {\n  New = 0,\n  InProgress = 1,\n  Completed = 2,\n  Draft = 3,\n}\nexport enum tasksPriorities {\n  Low = 0,\n  Middle = 1,\n  Hi = 2,\n  Urgently = 3,\n  Later = 4,\n}\n\nexport type TodolistType = {\n  id: string;\n  title: string;\n  order: number;\n  addedDate: string;\n};\n\nexport type TaskType = {\n  description: string;\n  title: string;\n  status: taskStatuses;\n  priority: tasksPriorities;\n  startDate: string;\n  deadline: string;\n  id: string;\n  todoListId: string;\n  order: number;\n  addedDate: string;\n};\n\nexport type ResponseType<D = {}> = {\n  data: {\n    resultCode: number;\n    messages: string[];\n    data: D;\n  };\n};\ntype GetTasksResponse = {\n  items: Array<TaskType>;\n  totalCount: number;\n  error: string | null;\n};\nexport type PayloadTaskType = {\n  description: string;\n  title: string;\n  status: number;\n  priority: number;\n  startDate: string;\n  deadline: string;\n};\n\nexport type AuthPayloadType = {\n  email: string;\n  password: string;\n  rememberMe?: boolean;\n  captcha?: string;\n};\n\ntype AuthResponseType = {\n  id: number;\n  email: string;\n  login: string;\n};\n","import { Dispatch } from 'redux';\n\nimport { ResponseType } from '../api/todolists-api';\nimport {\n  setAppErrorAC,\n  SetAppErrorActionType,\n  setAppStatusAC,\n  SetAppStatusActionType,\n} from '../app/AppReducer';\n\n// generic function\nexport const handleServerAppError = <T>(\n  data: ResponseType<T>,\n  dispatch: ErrorUtilsDispatchType,\n): void => {\n  if (data.data.messages) {\n    dispatch(setAppErrorAC(data.data.messages[0]));\n  } else {\n    dispatch(setAppErrorAC('Some error occurred'));\n  }\n  dispatch(setAppStatusAC('failed'));\n};\n\nexport const handleServerNetworkError = (\n  error: { message: string },\n  dispatch: ErrorUtilsDispatchType,\n): void => {\n  dispatch(setAppErrorAC(error.message));\n  dispatch(setAppStatusAC('failed'));\n};\n\ntype ErrorUtilsDispatchType = Dispatch<SetAppErrorActionType | SetAppStatusActionType>;\n","export const TDL_ACTIONS = {\n  ADD_TODOLIST: 'ADD-TODOLIST',\n  REMOVE_TODOLIST: 'REMOVE_TODOLIST',\n  CHANGE_TDL_NAME: 'CHANGE_TDL_NAME',\n  CHANGE_FILTER: 'CHANGE_FILTER',\n  SET_TODOLISTS: 'SET_TODOLISTS',\n  CHANGE_TODOLIST_ENTITY_STATUS: 'CHANGE_TODOLIST_ENTITY_STATUS',\n  CLEAR_DATA: 'CLEAR_DATA',\n} as const;\n\nexport const TSK_ACTIONS = {\n  ADD_TASK: 'ADD_TASK',\n  REMOVE_TASK: 'REMOVE_TASK',\n  ADD_EMPTY_TASK_LIST: 'ADD_EMPTY_TASK_LIST',\n  REMOVE_EMPTY_TASK_LIST: 'REMOVE_EMPTY_TASK_LIST',\n  CHANGE_TASK_NAME: 'CHANGE_TASK_NAME',\n  CHANGE_TASK_STATUS: 'CHANGE_TASK_STATUS',\n  SET_TASKS: 'SET_TASKS',\n  UPDATE_TASK: 'UPDATE_TASK',\n  CHANGE_TASK_ENTITY_STATUS: 'CHANGE_TASK_ENTITY_STATUS',\n} as const;\n","import { Dispatch } from 'redux';\n\nimport {\n  PayloadTaskType,\n  tasksPriorities,\n  taskStatuses,\n  TaskType,\n  todolistsAPI,\n} from '../../api/todolists-api';\nimport { AppActionsType, RequestStatusType, setAppStatusAC } from '../../app/AppReducer';\nimport { AppStateType } from '../../app/store';\nimport { TDL_ACTIONS, TSK_ACTIONS } from '../../utils/consts/global_consts';\nimport { handleServerAppError, handleServerNetworkError } from '../../utils/error-utils';\n\nimport {\n  addTodoListAC,\n  clearDataAC,\n  removeTodoListAC,\n  setTodoListsAC,\n} from './TodolistReducer';\n\nexport const TasksReducer = (\n  tasks: TasksType = {},\n  action: TasksActionsTypes,\n): TasksType => {\n  switch (action.type) {\n    case TSK_ACTIONS.CHANGE_TASK_ENTITY_STATUS:\n      return {\n        ...tasks,\n        [action.todolistID]: tasks[action.todolistID].map(ts =>\n          ts.id === action.taskID ? { ...ts, tsEntityStatus: action.entityStatus } : ts,\n        ),\n      };\n    case TDL_ACTIONS.SET_TODOLISTS:\n      return action.todoLists.reduce((acc, tl) => ({ ...acc, [tl.id]: [] }), {\n        ...tasks,\n      });\n    case TSK_ACTIONS.SET_TASKS:\n      return {\n        ...tasks,\n        [action.todoListId]: action.tasks.map(ts => ({ ...ts, tsEntityStatus: 'idle' })),\n      };\n    case TSK_ACTIONS.ADD_TASK:\n      return {\n        ...tasks,\n        [action.task.todoListId]: [\n          { ...action.task, tsEntityStatus: 'idle' },\n          ...tasks[action.task.todoListId],\n        ],\n      };\n    case TDL_ACTIONS.ADD_TODOLIST:\n      return { ...tasks, [action.todolist.id]: [] };\n    case TDL_ACTIONS.REMOVE_TODOLIST: {\n      const copyTasks = { ...tasks };\n      delete copyTasks[action.todolistID];\n      return copyTasks;\n    }\n    case TSK_ACTIONS.REMOVE_TASK:\n      return {\n        ...tasks,\n        [action.todolistID]: tasks[action.todolistID].filter(ts => ts.id !== action.id),\n      };\n    case TSK_ACTIONS.UPDATE_TASK:\n      return {\n        ...tasks,\n        [action.todolistID]: tasks[action.todolistID].map(ts =>\n          ts.id === action.taskID ? { ...ts, ...action.model } : ts,\n        ),\n      };\n    case TDL_ACTIONS.CLEAR_DATA:\n      return {};\n    default:\n      return tasks;\n  }\n};\n\n// action creators\nexport const setTasksAC = (tasks: TaskType[], todoListId: string) => ({\n  type: TSK_ACTIONS.SET_TASKS,\n  tasks,\n  todoListId,\n});\nexport const addTaskAC = (task: TaskType) => ({ type: TSK_ACTIONS.ADD_TASK, task });\nexport const removeTaskAC = (todolistID: string, id: string) => ({\n  type: TSK_ACTIONS.REMOVE_TASK,\n  todolistID,\n  id,\n});\nexport const updateTaskAC = (\n  todolistID: string,\n  taskID: string,\n  model: updateDomainTaskModelType,\n) => ({ type: TSK_ACTIONS.UPDATE_TASK, todolistID, taskID, model });\nexport const changeTaskEntityStatusAC = (\n  todolistID: string,\n  taskID: string,\n  entityStatus: RequestStatusType,\n) => ({ type: TSK_ACTIONS.CHANGE_TASK_ENTITY_STATUS, todolistID, taskID, entityStatus });\n\n// thunk\nexport const fetchTasksTC =\n  (todoListId: string) => (dispatch: Dispatch<ThunkActionsTypes>) => {\n    dispatch(setAppStatusAC('loading'));\n    todolistsAPI.getTasks(todoListId).then(res => {\n      dispatch(setTasksAC(res.data.items, todoListId));\n      dispatch(setAppStatusAC('succeeded'));\n    });\n  };\n\nexport const removeTaskTC =\n  (todoListId: string, taskId: string) => (dispatch: Dispatch<ThunkActionsTypes>) => {\n    dispatch(setAppStatusAC('loading'));\n    dispatch(changeTaskEntityStatusAC(todoListId, taskId, 'loading'));\n    todolistsAPI.deleteTask(todoListId, taskId).then(res => {\n      dispatch(removeTaskAC(todoListId, taskId));\n      dispatch(setAppStatusAC('succeeded'));\n      dispatch(changeTaskEntityStatusAC(todoListId, taskId, 'succeeded'));\n    });\n  };\n\nexport const addTaskTC =\n  (title: string, todoListId: string) => (dispatch: Dispatch<ThunkActionsTypes>) => {\n    dispatch(setAppStatusAC('loading'));\n    todolistsAPI\n      .createTask(title, todoListId)\n      .then(res => {\n        if (res.data.resultCode === 0) {\n          dispatch(addTaskAC(res.data.data.item));\n          dispatch(setAppStatusAC('succeeded'));\n        } else {\n          handleServerAppError(res, dispatch);\n        }\n      })\n      .catch(error => {\n        handleServerNetworkError(error, dispatch);\n      });\n  };\n\nexport const updateTaskTC =\n  (todolistId: string, taskId: string, domainModel: updateDomainTaskModelType) =>\n  (dispatch: Dispatch<ThunkActionsTypes>, getState: () => AppStateType) => {\n    const task = getState().tasks[todolistId].find(t => t.id === taskId);\n    if (!task) {\n      return;\n    }\n\n    const apiModel: PayloadTaskType = {\n      deadline: task.deadline,\n      description: task.description,\n      priority: task.priority,\n      startDate: task.startDate,\n      title: task.title,\n      status: task.status,\n      ...domainModel,\n    };\n\n    dispatch(setAppStatusAC('loading'));\n    dispatch(changeTaskEntityStatusAC(todolistId, taskId, 'loading'));\n\n    todolistsAPI\n      .updateTask(todolistId, taskId, apiModel)\n      .then(res => {\n        if (res.data.resultCode === 0) {\n          const model = res.data.data.item;\n          dispatch(updateTaskAC(todolistId, taskId, model));\n          dispatch(setAppStatusAC('succeeded'));\n          dispatch(changeTaskEntityStatusAC(todolistId, taskId, 'succeeded'));\n        } else {\n          handleServerAppError(res, dispatch);\n        }\n      })\n      .catch(error => {\n        handleServerNetworkError(error, dispatch);\n      });\n  };\n\n// types\nexport type updateDomainTaskModelType = {\n  title?: string;\n  startDate?: string;\n  priority?: tasksPriorities;\n  description?: string;\n  deadline?: string;\n  status?: taskStatuses;\n};\n\nexport type TaskDomainType = TaskType & {\n  tsEntityStatus: RequestStatusType;\n};\nexport type TasksType = {\n  [key: string]: Array<TaskDomainType>;\n};\nexport type TasksActionsTypes =\n  | ReturnType<typeof removeTodoListAC>\n  | ReturnType<typeof addTodoListAC>\n  | ReturnType<typeof addTaskAC>\n  | ReturnType<typeof removeTaskAC>\n  | ReturnType<typeof setTodoListsAC>\n  | ReturnType<typeof setTasksAC>\n  | ReturnType<typeof updateTaskAC>\n  | ReturnType<typeof changeTaskEntityStatusAC>\n  | ReturnType<typeof clearDataAC>;\n\ntype ThunkActionsTypes = TasksActionsTypes | AppActionsType;\n","import { Dispatch } from 'redux';\nimport { ThunkAction } from 'redux-thunk';\n\nimport { todolistsAPI, TodolistType } from '../../api/todolists-api';\nimport { AppActionsType, RequestStatusType, setAppStatusAC } from '../../app/AppReducer';\nimport { AppStateType } from '../../app/store';\nimport { TDL_ACTIONS } from '../../utils/consts/global_consts';\nimport { handleServerNetworkError } from '../../utils/error-utils';\n\nimport { fetchTasksTC } from './TasksReducer';\n\nexport const TotoListReducer = (\n  todoLists: TodoListsType = [],\n  action: TodoListActionsTypes,\n): TodoListsType => {\n  switch (action.type) {\n    case TDL_ACTIONS.SET_TODOLISTS:\n      return action.todoLists.map(tdl => ({\n        ...tdl,\n        filter: 'all',\n        tlEntityStatus: 'idle',\n      }));\n    case TDL_ACTIONS.ADD_TODOLIST:\n      return [\n        { ...action.todolist, filter: 'all', tlEntityStatus: 'idle' },\n        ...todoLists,\n      ];\n    case TDL_ACTIONS.REMOVE_TODOLIST:\n      return todoLists.filter(tl => tl.id !== action.todolistID);\n    case TDL_ACTIONS.CHANGE_TDL_NAME:\n    case TDL_ACTIONS.CHANGE_FILTER:\n      return todoLists.map(tl =>\n        tl.id === action.payload.id ? { ...tl, ...action.payload } : tl,\n      );\n\n    case TDL_ACTIONS.CHANGE_TODOLIST_ENTITY_STATUS:\n      return todoLists.map(tl =>\n        tl.id === action.id ? { ...tl, tlEntityStatus: action.entityStatus } : tl,\n      );\n    case TDL_ACTIONS.CLEAR_DATA:\n      return [];\n    default:\n      return todoLists;\n  }\n};\n\n// action creators\nexport const addTodoListAC = (todolist: TodolistType) => ({\n  type: TDL_ACTIONS.ADD_TODOLIST,\n  todolist,\n});\nexport const removeTodoListAC = (todolistID: string) => ({\n  type: TDL_ACTIONS.REMOVE_TODOLIST,\n  todolistID,\n});\nexport const changeTodoListTitleAC = (todolistID: string, title: string) => ({\n  type: TDL_ACTIONS.CHANGE_TDL_NAME,\n  payload: { id: todolistID, title },\n});\nexport const changeTodoListFilterAC = (todolistID: string, filter: FilterValuesType) => ({\n  type: TDL_ACTIONS.CHANGE_FILTER,\n  payload: { id: todolistID, filter },\n});\n\nexport const setTodoListsAC = (todoLists: TodolistType[]) => ({\n  type: TDL_ACTIONS.SET_TODOLISTS,\n  todoLists,\n});\nexport const changeTodolistEntityStatusAC = (\n  id: string,\n  entityStatus: RequestStatusType,\n) => ({ type: TDL_ACTIONS.CHANGE_TODOLIST_ENTITY_STATUS, id, entityStatus });\nexport const clearDataAC = () => ({ type: TDL_ACTIONS.CLEAR_DATA });\n\n// thunk\nexport const fetchTodolistsTC =\n  (): ThunkAction<void, AppStateType, unknown, TodoListActionsTypes> => dispatch => {\n    dispatch(setAppStatusAC('loading'));\n    todolistsAPI\n      .getTodolist()\n      .then(res => {\n        dispatch(setTodoListsAC(res.data));\n        dispatch(setAppStatusAC('succeeded'));\n        return res.data;\n      })\n      .then(todos => {\n        todos.forEach(tl => {\n          dispatch(fetchTasksTC(tl.id));\n        });\n      })\n      .catch(error => {\n        handleServerNetworkError(error, dispatch);\n      });\n  };\nexport const removeTodoListTC =\n  (todolistID: string) => (dispatch: Dispatch<TodoListActionsTypes>) => {\n    dispatch(changeTodolistEntityStatusAC(todolistID, 'loading'));\n    dispatch(setAppStatusAC('loading'));\n    todolistsAPI\n      .deleteTodolist(todolistID)\n      .then(() => {\n        dispatch(removeTodoListAC(todolistID));\n        dispatch(setAppStatusAC('succeeded'));\n      })\n      .catch(error => {\n        handleServerNetworkError(error, dispatch);\n      });\n  };\nexport const addTodoListTC =\n  (title: string) => (dispatch: Dispatch<TodoListActionsTypes>) => {\n    dispatch(setAppStatusAC('loading'));\n    todolistsAPI\n      .createTodolist(title)\n      .then(response => {\n        dispatch(addTodoListAC(response.data.data.item));\n        dispatch(setAppStatusAC('succeeded'));\n      })\n      .catch(error => {\n        handleServerNetworkError(error, dispatch);\n      });\n  };\nexport const changeTodoListTitleTC =\n  (todolistID: string, title: string) => (dispatch: Dispatch<TodoListActionsTypes>) => {\n    dispatch(setAppStatusAC('loading'));\n    todolistsAPI\n      .updateTodolist(title, todolistID)\n      .then(() => {\n        dispatch(changeTodoListTitleAC(todolistID, title));\n        dispatch(setAppStatusAC('succeeded'));\n      })\n      .catch(error => {\n        handleServerNetworkError(error, dispatch);\n      });\n  };\n\n// types\nexport type TodoListsType = Array<TodoListDomenType>;\nexport type TodoListActionsTypes =\n  | ReturnType<typeof addTodoListAC>\n  | ReturnType<typeof removeTodoListAC>\n  | ReturnType<typeof changeTodoListTitleAC>\n  | ReturnType<typeof changeTodoListFilterAC>\n  | ReturnType<typeof setTodoListsAC>\n  | ReturnType<typeof changeTodolistEntityStatusAC>\n  | ReturnType<typeof clearDataAC>\n  | AppActionsType;\nexport type FilterValuesType = 'all' | 'active' | 'completed';\nexport type TodoListDomenType = TodolistType & {\n  filter: FilterValuesType;\n  tlEntityStatus: RequestStatusType;\n};\n","import { Dispatch } from 'redux';\n\nimport { authAPI, AuthPayloadType } from '../../api/todolists-api';\nimport {\n  SetAppErrorActionType,\n  setAppStatusAC,\n  SetAppStatusActionType,\n} from '../../app/AppReducer';\nimport { handleServerAppError, handleServerNetworkError } from '../../utils/error-utils';\nimport { clearDataAC } from '../TodolistsList/TodolistReducer';\n\nconst initialState = {\n  isLoggedIn: false,\n};\ntype InitialStateType = typeof initialState;\n\nexport const AuthReducer = (\n  state: InitialStateType = initialState,\n  action: ActionsType,\n): InitialStateType => {\n  switch (action.type) {\n    case 'login/SET-IS-LOGGED-IN':\n      return { ...state, isLoggedIn: action.value };\n    default:\n      return state;\n  }\n};\n\nexport const setIsLoggedInAC = (value: boolean) =>\n  ({ type: 'login/SET-IS-LOGGED-IN', value } as const);\n\n// thunks\nexport const loginTC =\n  (authPayload: AuthPayloadType) => (dispatch: Dispatch<ActionsType>) => {\n    dispatch(setAppStatusAC('loading'));\n    authAPI\n      .login(authPayload)\n      .then(res => {\n        if (res.data.resultCode === 0) {\n          dispatch(setIsLoggedInAC(true));\n          dispatch(setAppStatusAC('succeeded'));\n        } else {\n          handleServerAppError(res, dispatch);\n        }\n      })\n      .catch(error => {\n        handleServerNetworkError(error, dispatch);\n      });\n  };\n\nexport const logoutTC = () => (dispatch: Dispatch<ActionsType>) => {\n  dispatch(setAppStatusAC('loading'));\n  authAPI\n    .logout()\n    .then(res => {\n      if (res.data.resultCode === 0) {\n        dispatch(setIsLoggedInAC(false));\n        dispatch(clearDataAC());\n        dispatch(setAppStatusAC('succeeded'));\n      } else {\n        handleServerAppError(res, dispatch);\n      }\n    })\n    .catch(error => {\n      handleServerNetworkError(error, dispatch);\n    });\n};\n\n// types\ntype ActionsType =\n  | ReturnType<typeof setIsLoggedInAC>\n  | SetAppStatusActionType\n  | SetAppErrorActionType\n  | ReturnType<typeof clearDataAC>;\n","import { Dispatch } from 'redux';\n\nimport { authAPI } from '../api/todolists-api';\nimport { setIsLoggedInAC } from '../features/Login/AuthReducer';\nimport { handleServerAppError, handleServerNetworkError } from '../utils/error-utils';\n\nexport type InitialStateType = {\n  isInitialized: boolean;\n  status: RequestStatusType;\n  error: string | null;\n};\n\nconst initialState: InitialStateType = {\n  isInitialized: false,\n  status: 'idle',\n  error: null,\n};\n\nexport const AppReducer = (\n  state: InitialStateType = initialState,\n  action: AppActionsType,\n): InitialStateType => {\n  switch (action.type) {\n    case 'APP/SET_IS_INITIALIZED':\n      return { ...state, isInitialized: action.value };\n    case 'APP/SET_STATUS':\n      return { ...state, status: action.status };\n    case 'APP/SET_ERROR':\n      return { ...state, error: action.error };\n    default:\n      return { ...state };\n  }\n};\n\n// action creators\nexport const setIsInitializedAC = (value: boolean) =>\n  ({ type: 'APP/SET_IS_INITIALIZED', value } as const);\nexport const setAppStatusAC = (status: RequestStatusType) =>\n  ({ type: 'APP/SET_STATUS', status } as const);\nexport const setAppErrorAC = (error: string | null) =>\n  ({ type: 'APP/SET_ERROR', error } as const);\n\n// thunk\nexport const initializeAppTC = () => (dispatch: Dispatch) => {\n  authAPI\n    .me()\n    .then(res => {\n      if (res.data.resultCode === 0) {\n        dispatch(setIsLoggedInAC(true));\n      } else {\n        handleServerAppError(res, dispatch);\n      }\n    })\n    .catch(error => {\n      handleServerNetworkError(error, dispatch);\n    })\n    .finally(() => {\n      dispatch(setIsInitializedAC(true));\n    });\n};\n\n// types\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed';\nexport type SetAppErrorActionType = ReturnType<typeof setAppErrorAC>;\nexport type SetAppStatusActionType = ReturnType<typeof setAppStatusAC>;\nexport type SetIsInitializedType = ReturnType<typeof setIsInitializedAC>;\nexport type AppActionsType =\n  | SetAppErrorActionType\n  | SetAppStatusActionType\n  | SetIsInitializedType;\n","import React from 'react';\n\nimport MuiAlert, { AlertProps } from '@mui/material/Alert';\nimport Snackbar from '@mui/material/Snackbar';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { setAppErrorAC } from '../../app/AppReducer';\nimport { AppStateType } from '../../app/store';\n\nconst Alert = React.forwardRef<HTMLDivElement, AlertProps>((props, ref) => (\n  <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />\n));\n\nexport const ErrorSnackbar = (): React.ReactElement => {\n  const dispatch = useDispatch();\n  const error = useSelector<AppStateType, string | null>(state => state.app.error);\n\n  const handleClose = (event?: React.SyntheticEvent, reason?: string): void => {\n    if (reason === 'clickaway') {\n      return;\n    }\n    dispatch(setAppErrorAC(null));\n  };\n\n  return (\n    <Snackbar\n      anchorOrigin={{ vertical: 'bottom', horizontal: 'center' }}\n      open={error !== null}\n      autoHideDuration={6000}\n      onClose={handleClose}\n    >\n      <Alert onClose={handleClose} severity=\"error\">\n        {error}\n      </Alert>\n    </Snackbar>\n  );\n};\n","import React from 'react';\n\nimport Button from '@mui/material/Button';\nimport Checkbox from '@mui/material/Checkbox';\nimport FormControl from '@mui/material/FormControl';\nimport FormControlLabel from '@mui/material/FormControlLabel';\nimport FormGroup from '@mui/material/FormGroup';\nimport FormLabel from '@mui/material/FormLabel';\nimport Grid from '@mui/material/Grid';\nimport TextField from '@mui/material/TextField';\nimport { useFormik } from 'formik';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Navigate } from 'react-router-dom';\n\nimport { AppStateType } from '../../app/store';\n\nimport { loginTC } from './AuthReducer';\n\nexport const Login = (): React.ReactElement => {\n  const dispatch = useDispatch();\n  const isLoggedIn = useSelector<AppStateType, boolean>(state => state.auth.isLoggedIn);\n\n  type FormikErrorType = {\n    email?: string;\n    password?: string;\n    rememberMe?: boolean;\n  };\n\n  const formik = useFormik({\n    initialValues: {\n      email: '',\n      password: '',\n      rememberMe: false,\n    },\n    validate: values => {\n      const errors: FormikErrorType = {};\n      if (!values.email) {\n        errors.email = 'e-mail required';\n      } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\n        errors.email = 'Invalid email address';\n      }\n      if (!values.password) {\n        errors.password = 'password required';\n      } else if (values.password.length < 2) {\n        errors.password = 'password required min 2 symbols';\n      }\n      return errors;\n    },\n    onSubmit: values => {\n      dispatch(loginTC(values));\n      formik.resetForm();\n    },\n  });\n\n  if (isLoggedIn) {\n    return <Navigate to=\"/\" />;\n  }\n\n  return (\n    <Grid container justifyContent=\"center\">\n      <Grid item justifyContent=\"center\">\n        <form onSubmit={formik.handleSubmit}>\n          <FormControl>\n            <FormLabel>\n              <p>\n                To log in get registered\n                <a\n                  href=\"https://social-network.samuraijs.com/\"\n                  target=\"_blank\"\n                  rel=\"noreferrer\"\n                >\n                  {' '}\n                  here\n                </a>\n              </p>\n              <p>or use common test account credentials:</p>\n              <p>Email: free@samuraijs.com</p>\n              <p>Password: free</p>\n            </FormLabel>\n            <FormGroup>\n              <TextField\n                {...formik.getFieldProps('email')}\n                onBlur={formik.handleBlur}\n                label=\"Email\"\n                margin=\"normal\"\n                error={!!formik.errors.email && formik.touched.email}\n                helperText={\n                  !!formik.errors.email && formik.touched.email && formik.errors.email\n                }\n              />\n              <TextField\n                {...formik.getFieldProps('password')}\n                onBlur={formik.handleBlur}\n                type=\"password\"\n                label=\"Password\"\n                margin=\"normal\"\n                error={!!formik.errors.password && formik.touched.password}\n                helperText={\n                  !!formik.errors.password &&\n                  formik.touched.password &&\n                  formik.errors.password\n                }\n              />\n              <FormControlLabel\n                label=\"Remember me\"\n                control={\n                  <Checkbox\n                    name=\"rememberMe\"\n                    onChange={formik.handleChange}\n                    value={formik.values.rememberMe}\n                  />\n                }\n              />\n              <Button type=\"submit\" variant=\"contained\" color=\"primary\">\n                Login\n              </Button>\n            </FormGroup>\n          </FormControl>\n        </form>\n      </Grid>\n    </Grid>\n  );\n};\n","import React, { ChangeEvent, KeyboardEvent, useState } from 'react';\n\nimport { IconButton, TextField } from '@material-ui/core';\nimport { AddBox } from '@material-ui/icons';\n\nexport type AddItemFormPropsType = {\n  addItem: (title: string) => void;\n  disabled?: boolean;\n};\n\nexport const AddItemForm = React.memo(\n  ({ addItem, disabled = false }: AddItemFormPropsType) => {\n    const [currentTitle, setCurrentTitle] = useState('');\n    const [error, setError] = useState<string | null>(null);\n\n    const onChangeTitleHandler = (e: ChangeEvent<HTMLInputElement>): void => {\n      setCurrentTitle(e.currentTarget.value);\n    };\n\n    const addItemHandler = (): void => {\n      if (currentTitle.trim() !== '') {\n        addItem(currentTitle.trim());\n        setCurrentTitle('');\n      } else {\n        setError('Title is required');\n      }\n    };\n\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\n      if (error !== null) {\n        setError(null);\n      }\n      if (e.key === 'Enter') {\n        addItemHandler();\n        setCurrentTitle('');\n      }\n    };\n    return (\n      <div>\n        <TextField\n          value={currentTitle}\n          error={!!error}\n          helperText={error}\n          label=\"Title\"\n          variant=\"outlined\"\n          onChange={onChangeTitleHandler}\n          onKeyPress={onKeyPressHandler}\n          size=\"small\"\n          disabled={disabled}\n        />\n        <IconButton color=\"primary\" onClick={addItemHandler} disabled={disabled}>\n          <AddBox />\n        </IconButton>\n      </div>\n    );\n  },\n);\n","import React, { ChangeEvent, useState } from 'react';\n\nimport { TextField, Typography } from '@material-ui/core';\n\nexport type EditableSpanProps = {\n  title: string;\n  onChange: (title: string) => void;\n  disabled?: boolean;\n};\n\nexport const EditableSpan = React.memo(\n  ({ title, onChange, disabled = false }: EditableSpanProps) => {\n    const [editMode, setEditMode] = useState<boolean>(false);\n    const [locTitle, setLocTitle] = useState<string>(title || '');\n\n    const activateEditMode = () => {\n      if (disabled) return;\n      setEditMode(true);\n    };\n\n    const activateViewMode = () => {\n      onChange(title);\n      setEditMode(false);\n    };\n\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\n      setLocTitle(e.currentTarget.value);\n    };\n\n    return editMode ? (\n      <TextField\n        value={locTitle}\n        id=\"outlined-basic\"\n        label=\"Change task title\"\n        variant=\"outlined\"\n        autoFocus\n        onChange={onChangeHandler}\n        onBlur={activateViewMode}\n        size=\"small\"\n      />\n    ) : (\n      <Typography onDoubleClick={activateEditMode} variant=\"h6\" component=\"span\">\n        {title}\n      </Typography>\n    );\n  },\n);\n","import React, { ChangeEvent, useCallback } from 'react';\n\nimport { Checkbox, IconButton } from '@material-ui/core';\nimport { Delete } from '@material-ui/icons';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { taskStatuses } from '../../../../api/todolists-api';\nimport { AppStateType } from '../../../../app/store';\nimport { EditableSpan } from '../../../../components/EditableSpan/EditableSpan';\nimport { removeTaskTC, TaskDomainType, updateTaskTC } from '../../TasksReducer';\nimport { TodoListDomenType } from '../../TodolistReducer';\n\ntype TaskPropsType = {\n  tId: string;\n  todolistID: string;\n};\n\nexport const Task = React.memo((props: TaskPropsType) => {\n  const dispatch = useDispatch();\n  const todoList = useSelector<AppStateType, TodoListDomenType>(\n    state => state.todoLists.find(td => td.id === props.todolistID)!,\n  );\n  const task = useSelector<AppStateType, TaskDomainType>(\n    state => state.tasks[props.todolistID].filter(tsk => tsk.id === props.tId)[0],\n  );\n\n  const changeTaskStatus = useCallback(\n    (e: ChangeEvent<HTMLInputElement>) => {\n      dispatch(\n        updateTaskTC(props.todolistID, task.id, {\n          status: e.currentTarget.checked ? taskStatuses.Completed : taskStatuses.New,\n        }),\n      );\n    },\n    [dispatch, props.todolistID, task.id],\n  );\n\n  const changeTaskTitle = useCallback(\n    (title: string) => {\n      dispatch(updateTaskTC(props.todolistID, task.id, { title }));\n    },\n    [dispatch, props.todolistID, task.id],\n  );\n\n  const removeTask = useCallback(() => {\n    dispatch(removeTaskTC(props.todolistID, task.id));\n  }, [dispatch, props.todolistID, task.id]);\n\n  return (\n    <div className={task.status === taskStatuses.New ? 'is-done' : ''}>\n      <Checkbox\n        disabled={\n          task.tsEntityStatus === 'loading' || todoList.tlEntityStatus === 'loading'\n        }\n        onChange={changeTaskStatus}\n        checked={task.status === taskStatuses.Completed}\n        color=\"primary\"\n      />\n      <EditableSpan\n        title={task.title}\n        onChange={changeTaskTitle}\n        disabled={\n          task.tsEntityStatus === 'loading' || todoList.tlEntityStatus === 'loading'\n        }\n      />\n\n      <IconButton\n        onClick={removeTask}\n        aria-label=\"delete task\"\n        color=\"default\"\n        disabled={\n          task.tsEntityStatus === 'loading' || todoList.tlEntityStatus === 'loading'\n        }\n      >\n        <Delete />\n      </IconButton>\n    </div>\n  );\n});\n","import React, { useCallback } from 'react';\n\nimport { Button, IconButton, Typography } from '@material-ui/core';\nimport { Delete } from '@material-ui/icons';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { taskStatuses, TaskType } from '../../../api/todolists-api';\nimport { AppStateType } from '../../../app/store';\nimport { AddItemForm } from '../../../components/AddItemForm/AddItemForm';\nimport { EditableSpan } from '../../../components/EditableSpan/EditableSpan';\nimport { addTaskTC } from '../TasksReducer';\nimport {\n  changeTodoListFilterAC,\n  changeTodoListTitleTC,\n  FilterValuesType,\n  removeTodoListTC,\n  TodoListDomenType,\n} from '../TodolistReducer';\n\nimport { Task } from './Task/Task';\n\ntype PropsType = {\n  todolistID: string;\n  filter: FilterValuesType;\n  demo?: boolean;\n};\n\nexport const Todolist = React.memo(({ demo = false, ...props }: PropsType) => {\n  const dispatch = useDispatch();\n  const todoList = useSelector<AppStateType, TodoListDomenType>(\n    state => state.todoLists.find(td => td.id === props.todolistID)!,\n  );\n  const tasksState = useSelector<AppStateType, TaskType[]>(\n    state => state.tasks[props.todolistID],\n  );\n\n  // useEffect(() => {\n  //     if (demo) {\n  //         return;\n  //     }\n  //     dispatch(fetchTasksTC(props.todolistID))\n  // }, [dispatch, props.todolistID])\n\n  let tasks = tasksState;\n  if (todoList.filter === 'active') {\n    tasks = tasksState.filter(t => t.status === taskStatuses.New);\n  }\n  if (todoList.filter === 'completed') {\n    tasks = tasksState.filter(t => t.status === taskStatuses.Completed);\n  }\n\n  const onChangeTDlFilter = useCallback(\n    (filterValue: FilterValuesType) => {\n      dispatch(changeTodoListFilterAC(props.todolistID, filterValue));\n    },\n    [dispatch, props.todolistID],\n  );\n  const onChangeTDlTitle = useCallback(\n    (title: string) => {\n      dispatch(changeTodoListTitleTC(props.todolistID, title));\n    },\n    [dispatch, props.todolistID],\n  );\n  const onDeleteTDl = useCallback(() => {\n    dispatch(removeTodoListTC(props.todolistID));\n  }, [dispatch, props.todolistID]);\n  const addTaskHandler = useCallback(\n    (title: string) => {\n      dispatch(addTaskTC(title, props.todolistID));\n    },\n    [dispatch, props.todolistID],\n  );\n\n  return (\n    <div>\n      <Typography variant=\"h2\" component=\"span\">\n        <EditableSpan\n          title={todoList.title}\n          onChange={onChangeTDlTitle}\n          disabled={todoList.tlEntityStatus === 'loading'}\n        />\n        <IconButton\n          color=\"default\"\n          aria-label=\"delete Todolist\"\n          onClick={onDeleteTDl}\n          disabled={todoList.tlEntityStatus === 'loading'}\n        >\n          <Delete />\n        </IconButton>\n      </Typography>\n      <AddItemForm\n        addItem={addTaskHandler}\n        disabled={todoList.tlEntityStatus === 'loading'}\n      />\n      <div>\n        {tasks.map(t => (\n          <Task key={t.id} tId={t.id} todolistID={props.todolistID} />\n        ))}\n      </div>\n      <div>\n        <Button\n          size=\"small\"\n          variant={props.filter === 'all' ? 'outlined' : 'text'}\n          color=\"default\"\n          onClick={() => onChangeTDlFilter('all')}\n        >\n          All\n        </Button>\n        <Button\n          size=\"small\"\n          variant={props.filter === 'active' ? 'outlined' : 'text'}\n          color=\"primary\"\n          onClick={() => onChangeTDlFilter('active')}\n        >\n          Active\n        </Button>\n        <Button\n          size=\"small\"\n          variant={props.filter === 'completed' ? 'outlined' : 'text'}\n          color=\"secondary\"\n          onClick={() => onChangeTDlFilter('completed')}\n        >\n          Completed\n        </Button>\n      </div>\n    </div>\n  );\n});\n","import React, { ReactElement, useCallback, useEffect } from 'react';\n\nimport { Grid, Paper } from '@material-ui/core';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Navigate } from 'react-router-dom';\n\nimport { AppStateType } from '../../app/store';\nimport { AddItemForm } from '../../components/AddItemForm/AddItemForm';\n\nimport { Todolist } from './Todolist/Todolist';\nimport { addTodoListTC, fetchTodolistsTC, TodoListsType } from './TodolistReducer';\n\ntype PropsType = {\n  demo?: boolean;\n};\n\nexport const TodolistsList = ({ demo = false }: PropsType): ReactElement => {\n  const dispatch = useDispatch();\n  const todolistState = useSelector<AppStateType, TodoListsType>(\n    state => state.todoLists,\n  );\n  const isLoggedIn = useSelector<AppStateType, boolean>(state => state.auth.isLoggedIn);\n\n  useEffect(() => {\n    if (demo || !isLoggedIn) {\n      return;\n    }\n    dispatch(fetchTodolistsTC());\n  }, [dispatch, demo, isLoggedIn]);\n\n  const addTodoList = useCallback(\n    (title: string) => {\n      dispatch(addTodoListTC(title));\n    },\n    [dispatch],\n  );\n\n  if (!isLoggedIn) {\n    return <Navigate to=\"/login\" />;\n  }\n\n  return (\n    <>\n      <Grid\n        container\n        style={{\n          padding: 10,\n          marginBottom: 30,\n          display: 'flex',\n          justifyContent: 'center',\n        }}\n      >\n        <AddItemForm addItem={addTodoList} />\n      </Grid>\n      <Grid container spacing={2}>\n        {todolistState.map(tl => (\n          <Grid item xs={3} key={tl.id}>\n            <Paper\n              elevation={3}\n              style={{\n                padding: 10,\n                display: 'flex',\n                justifyContent: 'center',\n                minWidth: 150,\n                maxWidth: 300,\n              }}\n            >\n              <Todolist todolistID={tl.id} filter={tl.filter} demo={demo} />\n            </Paper>\n          </Grid>\n        ))}\n      </Grid>\n    </>\n  );\n};\n","import React, { useEffect } from 'react';\n\nimport './App.css';\nimport { Container, LinearProgress } from '@material-ui/core';\nimport AppBar from '@material-ui/core/AppBar';\nimport Button from '@material-ui/core/Button';\nimport IconButton from '@material-ui/core/IconButton';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport { CircularProgress } from '@mui/material';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Route, Routes } from 'react-router-dom';\n\nimport { ErrorSnackbar } from '../components/ErrorSnackbar/ErrorSnackbar';\nimport { logoutTC } from '../features/Login/AuthReducer';\nimport { Login } from '../features/Login/Login';\nimport { TodolistsList } from '../features/TodolistsList/TodolistsList';\n\nimport { initializeAppTC, RequestStatusType } from './AppReducer';\nimport { AppStateType } from './store';\n\ntype PropsType = {\n  demo?: boolean;\n};\n\nexport const App = React.memo(({ demo = false }: PropsType) => {\n  const status = useSelector<AppStateType, RequestStatusType>(state => state.app.status);\n  const isInitialized = useSelector<AppStateType, boolean>(\n    state => state.app.isInitialized,\n  );\n  const isLoggedIn = useSelector<AppStateType, boolean>(state => state.auth.isLoggedIn);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(initializeAppTC());\n  }, [dispatch]);\n\n  if (!isInitialized) {\n    return (\n      <div style={{ position: 'fixed', top: '30%', textAlign: 'center', width: '100%' }}>\n        <CircularProgress />\n      </div>\n    );\n  }\n\n  const logOutHandler = (): void => {\n    dispatch(logoutTC());\n  };\n\n  return (\n    <div>\n      <Container maxWidth=\"xl\">\n        <ErrorSnackbar />\n        <AppBar position=\"static\" style={{ marginBottom: 30 }}>\n          <Toolbar style={{ display: 'flex', justifyContent: 'space-between' }}>\n            <div style={{ display: 'flex', alignItems: 'center' }}>\n              <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\n                <MenuIcon />\n              </IconButton>\n              <Typography variant=\"h6\">My Todolist Project</Typography>\n            </div>\n            <Button color=\"inherit\" onClick={logOutHandler} disabled={!isLoggedIn}>\n              Log out\n            </Button>\n          </Toolbar>\n          <div className=\"linearProgress\">\n            {status === 'loading' && <LinearProgress />}\n          </div>\n        </AppBar>\n        <Routes>\n          <Route path=\"/\" element={<TodolistsList demo={demo} />} />\n          <Route path=\"login\" element={<Login />} />\n          <Route path=\"*\" element={<h1>404: PAGE NOT FOUND</h1>} />\n        </Routes>\n      </Container>\n    </div>\n  );\n});\n","import { configureStore } from '@reduxjs/toolkit';\nimport { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport { combineReducers } from 'redux';\nimport logger from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\n\nimport { AuthReducer } from '../features/Login/AuthReducer';\nimport { TasksReducer } from '../features/TodolistsList/TasksReducer';\nimport { TotoListReducer } from '../features/TodolistsList/TodolistReducer';\n\nimport { AppReducer } from './AppReducer';\n\nexport const RootReducer = combineReducers({\n  todoLists: TotoListReducer,\n  tasks: TasksReducer,\n  app: AppReducer,\n  auth: AuthReducer,\n});\n\nexport type AppStateType = ReturnType<typeof rootState.getState>;\nexport type AppDispatch = typeof rootState.dispatch;\nexport const useAppDispatch = (): AppDispatch => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<AppStateType> = useSelector;\n\nexport const rootState = configureStore({\n  reducer: RootReducer,\n  middleware: getDefaultMiddleware =>\n    getDefaultMiddleware().prepend(thunkMiddleware).concat(logger),\n});\n\n// @ts-ignore\nwindow.store = rootState;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        // eslint-disable-next-line @typescript-eslint/no-use-before-define\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {});\n      } else {\n        // Is not localhost. Just register service worker\n        // eslint-disable-next-line @typescript-eslint/no-use-before-define\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      // eslint-disable-next-line no-param-reassign\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              // Execute callback\n              // eslint-disable-next-line no-lonely-if\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\n\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { Provider } from 'react-redux';\nimport { HashRouter } from 'react-router-dom';\n\nimport { App } from './app/App';\nimport { rootState } from './app/store';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <Provider store={rootState}>\n    <HashRouter>\n      <App />\n    </HashRouter>\n  </Provider>,\n  document.getElementById('root'),\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}