{"version":3,"sources":["components/AddItemForm.tsx","EditableSpan.tsx","reducers/TasksReducer.ts","reducers/TodolistReducer.ts","Todolist.tsx","App.tsx","serviceWorker.ts","redux/Store.ts","index.tsx"],"names":["AddItemForm","React","memo","props","useState","currentTitle","setCurrentTitle","error","setError","addTask","trim","addItem","TextField","value","helperText","label","variant","onChange","e","currentTarget","onKeyPress","key","size","IconButton","color","onClick","AddBox","EditableSpan","editMode","setEditMode","title","setTitle","id","autoFocus","onBlur","Typography","onDoubleClick","component","REMOVE_EMPTY_TASK_LIST","initTasksState","JSON","parse","localStorage","getItem","updateTasksLocalStorage","tasks","removeItem","setItem","stringify","REMOVE_TODOLIST","initState","updateTodoListLocalStorage","todoList","changeTodoListFilterAC","todolistID","type","Todolist","dispatch","changeTodoListTitleAC","onChangeTodoListHandler","aria-label","deleteTodoList","Delete","addTaskAC","map","t","className","isDone","Checkbox","taskId","checked","tID","taskID","changeTaskTitleAC","onChangeTaskName","todoListID","Button","filter","App","todolistState","useSelector","state","todoLists","tasksState","useDispatch","removeTodoListAC","removedID","Container","fixed","AppBar","position","style","marginBottom","Toolbar","display","justifyContent","alignItems","edge","Grid","container","padding","newID","v1","addTodoListAC","addEmptyTaskListAC","spacing","tl","tasksForTodolist","item","xs","Paper","elevation","minWidth","maxWidth","Boolean","window","location","hostname","match","RootReducer","combineReducers","action","newTodoList","filteredTodoList","updatedTodoList","filteredTodolist","newTasks","reduceTasks","ts","changedNameTasks","changedStatusTasks","AppState","createStore","ReactDOM","render","store","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.f7407a64.chunk.js","sourcesContent":["import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\nimport {IconButton, TextField} from \"@material-ui/core\";\r\nimport {AddBox} from \"@material-ui/icons\";\r\n\r\ntype AddItemForm = {\r\n    addItem: (title: string) => void\r\n}\r\n\r\nexport const AddItemForm = React.memo((props: AddItemForm) => {\r\n    let [currentTitle, setCurrentTitle] = useState(\"\")\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setCurrentTitle(e.currentTarget.value)\r\n    }\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        setError(null);\r\n        if (e.key === 'Enter') {\r\n            addTask();\r\n            setCurrentTitle('')\r\n        }\r\n    }\r\n    const addTask = () => {\r\n        if (currentTitle.trim() !== \"\") {\r\n            props.addItem(currentTitle.trim());\r\n            setCurrentTitle('')\r\n        } else {\r\n            setError(\"Title is required\");\r\n        }\r\n    }\r\n    return (\r\n        <div>\r\n            <TextField\r\n                value={currentTitle}\r\n                error={!!error}\r\n                helperText={error}\r\n                label=\"Title\"\r\n                variant=\"outlined\"\r\n                onChange={onChangeHandler}\r\n                onKeyPress={onKeyPressHandler}\r\n                size=\"small\"\r\n            />\r\n            <IconButton color=\"primary\" onClick={addTask}>\r\n                <AddBox/>\r\n            </IconButton>\r\n        </div>\r\n    )\r\n})","import React, {ChangeEvent, useState} from \"react\";\r\nimport {TextField, Typography} from \"@material-ui/core\";\r\n\r\ntype EditableSpanProps = {\r\n    title: string\r\n    onChange: (title: string) => void\r\n}\r\nexport const EditableSpan = React.memo((props: EditableSpanProps) => {\r\n\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n    const [title, setTitle] = useState<string>(props.title ? props.title : '')\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n    const activateViewMode = () => {\r\n        props.onChange(title)\r\n        setEditMode(false)\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return editMode ?\r\n        <TextField\r\n                id=\"outlined-basic\"\r\n                label=\"Change task title\"\r\n                variant=\"outlined\"\r\n                autoFocus={true}\r\n                onChange={onChangeHandler}\r\n                onBlur={activateViewMode}\r\n                size=\"small\"\r\n            />\r\n        : <Typography onDoubleClick={activateEditMode} variant=\"h6\" component=\"span\">\r\n            {props.title}\r\n        </Typography>\r\n})","import {v1} from \"uuid\";\r\n\r\nconst ADD_TASK = 'ADD_TASK'\r\nconst REMOVE_TASK = 'REMOVE_TASK'\r\nconst ADD_EMPTY_TASK_LIST = 'ADD_EMPTY_TASK_LIST'\r\nconst REMOVE_EMPTY_TASK_LIST = 'REMOVE_EMPTY_TASK_LIST'\r\nconst CHANGE_TASK_NAME = 'CHANGE_TASK_NAME'\r\nconst CHANGE_TASK_STATUS = 'CHANGE_TASK_STATUS'\r\n\r\nexport type tasksType = {\r\n    [todolistID: string]: Array<{ id: string, title: string, isDone: boolean }>\r\n}\r\n\r\nexport type TasksActionsTypes =\r\n    ReturnType<typeof addTaskAC>\r\n    | ReturnType<typeof removeTaskAC>\r\n    | ReturnType<typeof addEmptyTaskListAC>\r\n    | ReturnType<typeof removeEmptyTaskListAC>\r\n    | ReturnType<typeof changeTaskTitleAC>\r\n    | ReturnType<typeof changeTaskStatusAC>\r\n\r\nlet initTasksState: tasksType = JSON.parse(localStorage.getItem('TSK')!)\r\n// let initTasksState: tasksType = {\r\n//     '1': [\r\n//         {id: v1(), title: \"HTML&CSS\", isDone: true},\r\n//         {id: v1(), title: \"JS\", isDone: true}\r\n//     ],\r\n//     '2': [\r\n//         {id: v1(), title: \"Milk\", isDone: true},\r\n//         {id: v1(), title: \"React Book\", isDone: true}\r\n//     ]\r\n// }\r\n\r\nconst updateTasksLocalStorage = (tasks: tasksType) => {\r\n    localStorage.removeItem('TSK')\r\n    localStorage.setItem('TSK', JSON.stringify(tasks))\r\n}\r\n\r\nexport const TasksReducer = (tasks: tasksType = initTasksState ? initTasksState : {}, action: TasksActionsTypes) => {\r\n    switch (action.type) {\r\n\r\n        case \"ADD_TASK\":\r\n            let newTasks = {...tasks, [action.todolistID]: [...tasks[action.todolistID], {id: v1(), title: action.title, isDone: false}]}\r\n            updateTasksLocalStorage(newTasks)\r\n            return newTasks\r\n\r\n        case \"ADD_EMPTY_TASK_LIST\":\r\n            return {...tasks, [action.newID]: []}\r\n\r\n        case REMOVE_EMPTY_TASK_LIST:\r\n            delete tasks[action.removedID]\r\n            updateTasksLocalStorage(tasks)\r\n            return tasks\r\n\r\n        case \"REMOVE_TASK\":\r\n            let reduceTasks = {...tasks, [action.todolistID]: tasks[action.todolistID]\r\n                    .filter(ts => ts.id !== action.id)}\r\n            updateTasksLocalStorage(reduceTasks)\r\n            return reduceTasks\r\n\r\n        case \"CHANGE_TASK_NAME\":\r\n            let changedNameTasks = {...tasks, [action.todolistID]: tasks[action.todolistID]\r\n                    .map(ts => ts.id === action.taskID ? {...ts, title: action.title} : ts)}\r\n            updateTasksLocalStorage(changedNameTasks)\r\n            return changedNameTasks\r\n\r\n        case \"CHANGE_TASK_STATUS\":\r\n            let changedStatusTasks = {...tasks, [action.todolistID]: tasks[action.todolistID].map(ts => ts.id === action.taskId ? {...ts, isDone: action.isDone} : ts)}\r\n            updateTasksLocalStorage(changedStatusTasks)\r\n            return changedStatusTasks\r\n\r\n        default: return tasks\r\n    }\r\n}\r\n\r\nexport const addEmptyTaskListAC = (newID: string) => ({type: ADD_EMPTY_TASK_LIST, newID} as const)\r\nexport const removeEmptyTaskListAC = (removedID: string) => ({type: REMOVE_EMPTY_TASK_LIST, removedID} as const)\r\nexport const addTaskAC = (todolistID: string, title: string) => ({type: ADD_TASK, todolistID, title} as const)\r\nexport const removeTaskAC = (todolistID: string, id: string) => ({type: REMOVE_TASK, todolistID, id} as const)\r\nexport const changeTaskTitleAC = (todolistID: string, taskID: string, title: string) => ({type: CHANGE_TASK_NAME, todolistID, taskID, title} as const)\r\nexport const changeTaskStatusAC = (todolistID: string, taskId: string, isDone: boolean) => ({type: CHANGE_TASK_STATUS, todolistID, taskId, isDone} as const)","const ADD_TODOLIST = 'ADD-TODOLIST'\r\nconst REMOVE_TODOLIST = 'REMOVE_TODOLIST'\r\nconst CHANGE_TDL_NAME = 'CHANGE_TDL_NAME'\r\nconst CHANGE_FILTER = 'CHANGE_FILTER'\r\n\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\";\r\n\r\nexport type todoListsType = Array<{ id: string, title: string, filter: FilterValuesType }>\r\n\r\nexport type TodoListActionsTypes =\r\n    | ReturnType<typeof addTodoListAC>\r\n    | ReturnType<typeof removeTodoListAC>\r\n    | ReturnType<typeof changeTodoListTitleAC>\r\n    | ReturnType<typeof changeTodoListFilterAC>\r\n\r\nlet initState: todoListsType = JSON.parse(localStorage.getItem('TDL')!)\r\n// let initState: todoListsType = [\r\n//     {id: '1', title: \"What to learn\", filter: \"all\"},\r\n//     {id: '2', title: \"What to buy\", filter: \"all\"}\r\n// ]\r\n\r\nconst updateTodoListLocalStorage = (todoList: todoListsType) => {\r\n    localStorage.removeItem('TDL')\r\n    localStorage.setItem('TDL', JSON.stringify(todoList))\r\n}\r\n\r\nexport const TotoListReducer = (todoLists: todoListsType = initState ? initState : [], action: TodoListActionsTypes):todoListsType => {\r\n    switch (action.type) {\r\n        case \"ADD-TODOLIST\":\r\n            let newTodoList :todoListsType  = [...todoLists, {id: action.newID, title: action.title, filter: 'all'}]\r\n            updateTodoListLocalStorage(newTodoList)\r\n            return newTodoList\r\n\r\n        case REMOVE_TODOLIST:\r\n            let filteredTodoList = [...todoLists.filter(tl => tl.id !== action.todolistID)]\r\n            updateTodoListLocalStorage(filteredTodoList)\r\n            return filteredTodoList\r\n\r\n        case \"CHANGE_TDL_NAME\":\r\n            let updatedTodoList = todoLists.map(tl => tl.id === action.todolistID ? {...tl, title : action.title} : tl)\r\n            updateTodoListLocalStorage(updatedTodoList)\r\n            return updatedTodoList\r\n\r\n        case \"CHANGE_FILTER\":\r\n            let filteredTodolist = todoLists.map(tl => tl.id === action.todolistID ? {...tl, filter: action.value} : tl)\r\n            return filteredTodolist\r\n\r\n        default: return todoLists\r\n    }\r\n}\r\n\r\nexport const addTodoListAC = (title: string, newID: string) => ({type: ADD_TODOLIST, title, newID} as const)\r\nexport const removeTodoListAC = (todolistID: string) => ({type: REMOVE_TODOLIST, todolistID} as const)\r\nexport const changeTodoListTitleAC = (todolistID: string, title: string) => ({type: CHANGE_TDL_NAME, todolistID, title} as const)\r\nexport const changeTodoListFilterAC = (todolistID: string, value: FilterValuesType) => ({type: CHANGE_FILTER, todolistID, value} as const)","import React, {ChangeEvent} from 'react';\r\nimport {AddItemForm} from \"./components/AddItemForm\";\r\nimport {EditableSpan} from \"./EditableSpan\";\r\nimport {Button, Checkbox, IconButton, Typography} from \"@material-ui/core\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport {\r\n    addTaskAC,\r\n    changeTaskStatusAC,\r\n    changeTaskTitleAC,\r\n    removeTaskAC,\r\n    TasksActionsTypes\r\n} from \"./reducers/TasksReducer\";\r\nimport {changeTodoListFilterAC, changeTodoListTitleAC, TodoListActionsTypes, FilterValuesType} from \"./reducers/TodolistReducer\";\r\nimport {connect} from 'react-redux'\r\n\r\ntype TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\n\r\ntype PropsType = {\r\n    todolistID: string\r\n    title: string\r\n    deleteTodoList: (todolistID: string) => void\r\n    tasks: Array<TaskType>\r\n    filter: FilterValuesType\r\n    dispatch: (action: TodoListActionsTypes | TasksActionsTypes) => void\r\n}\r\n\r\nexport const Todolist = React.memo((props: PropsType) => {\r\n\r\n    const onAllClickHandler = () => props.dispatch(changeTodoListFilterAC(props.todolistID,\"all\"))\r\n    const onActiveClickHandler = () => props.dispatch(changeTodoListFilterAC(props.todolistID,\"active\"))\r\n    const onCompletedClickHandler = () => props.dispatch(changeTodoListFilterAC(props.todolistID,\"completed\"))\r\n\r\n\r\n    const onChangeTodoListHandler = (title: string) => {\r\n        props.dispatch(changeTodoListTitleAC(props.todolistID, title))\r\n    }\r\n    const onDeleteTodolistHandler = () => {\r\n        props.deleteTodoList(props.todolistID)\r\n    }\r\n    const onChangeTaskName = (todolistID: string, tID: string, title: string) => {\r\n        props.dispatch(changeTaskTitleAC(todolistID, tID, title))\r\n    }\r\n    const addTaskHandler = (title: string) => {\r\n        props.dispatch(addTaskAC(props.todolistID, title))\r\n    }\r\n    const removeTaskHandler = (todoListID: string, tID: string) => {\r\n        props.dispatch(removeTaskAC(todoListID, tID))\r\n    }\r\n\r\n\r\n    return <div>\r\n        <Typography variant=\"h2\" component=\"span\">\r\n            <EditableSpan title={props.title} onChange={(title) => onChangeTodoListHandler(title)}/>\r\n            <IconButton color=\"default\" aria-label=\"delete Todolist\" onClick={onDeleteTodolistHandler}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </Typography>\r\n        <AddItemForm addItem={addTaskHandler}/>\r\n        <div>\r\n            {\r\n                props.tasks.map(t => {\r\n                    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n                        props.dispatch(changeTaskStatusAC(props.todolistID, t.id, e.currentTarget.checked))\r\n                    }\r\n                    return (\r\n                        <div key={t.id} className={t.isDone ? \"is-done\" : \"\"}>\r\n                            <Checkbox\r\n                                onChange={onChangeHandler}\r\n                                checked={t.isDone}\r\n                                color=\"primary\"\r\n                            />\r\n                            <EditableSpan title={t.title}\r\n                                          onChange={(title) => onChangeTaskName(props.todolistID, t.id, title)}/>\r\n                            <IconButton onClick={() => {removeTaskHandler(props.todolistID, t.id)}} aria-label=\"delete task\" color=\"default\">\r\n                                <Delete/>\r\n                            </IconButton>\r\n                        </div>\r\n                    )\r\n                })\r\n            }\r\n        </div>\r\n        <div>\r\n            <Button size=\"small\" variant={props.filter === 'all' ? \"outlined\" : \"text\"}  color=\"default\" onClick={onAllClickHandler}>All</Button>\r\n            <Button size=\"small\" variant={props.filter === 'active' ? \"outlined\" : \"text\"} color=\"primary\" onClick={onActiveClickHandler}>Active</Button>\r\n            <Button size=\"small\" variant={props.filter === 'completed' ? \"outlined\" : \"text\"} color=\"secondary\" onClick={onCompletedClickHandler}>Completed</Button>\r\n\r\n        </div>\r\n    </div>\r\n})\r\n\r\n","import React from 'react';\r\nimport './App.css';\r\nimport {Todolist} from './Todolist';\r\nimport {v1} from 'uuid';\r\nimport {AddItemForm} from \"./components/AddItemForm\";\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Button from '@material-ui/core/Button';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport {Container, Grid, Paper} from \"@material-ui/core\";\r\nimport {addTodoListAC, removeTodoListAC, todoListsType} from \"./reducers/TodolistReducer\";\r\nimport {addEmptyTaskListAC, removeEmptyTaskListAC, tasksType} from \"./reducers/TasksReducer\";\r\nimport {AppState, AppStateType } from './redux/Store';\r\nimport { Provider, useDispatch, useSelector } from 'react-redux';\r\n\r\n\r\nconst App = () => {\r\n    const todolistState = useSelector<AppStateType, todoListsType>(state => state.todoLists)\r\n    const tasksState = useSelector<AppStateType, tasksType>(state => state.tasks)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const addTodoList = (title: string) => {\r\n        let newID = v1()\r\n        dispatch(addTodoListAC(title, newID))\r\n        dispatch(addEmptyTaskListAC(newID))\r\n    }\r\n    const deleteTodoList = (todolistID: string) => {\r\n        dispatch(removeTodoListAC(todolistID))\r\n        dispatch(removeEmptyTaskListAC(todolistID))\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Container fixed>\r\n                <AppBar position=\"static\" style={{marginBottom: 30}}>\r\n                    <Toolbar style={{display: 'flex', justifyContent: 'space-between'}}>\r\n                        <div style={{display: 'flex', alignItems: 'center'}}>\r\n                            <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                                <MenuIcon/>\r\n                            </IconButton>\r\n                            <Typography variant=\"h6\" >\r\n                                My Todolist Project\r\n                            </Typography>\r\n                        </div>\r\n\r\n                        <Button color=\"inherit\">Login</Button>\r\n                    </Toolbar>\r\n                </AppBar>\r\n\r\n                <Grid container style={{padding: 10, marginBottom: 30, display: \"flex\", justifyContent: \"center\"}}>\r\n                    <AddItemForm addItem={addTodoList}/>\r\n                </Grid>\r\n                <Grid container spacing={2}>\r\n                    {todolistState.map((tl) => {\r\n\r\n                        let tasksForTodolist = tasksState[tl.id]\r\n\r\n                        if (tl.filter === \"active\") {\r\n                            tasksForTodolist = tasksState[tl.id].filter(t => !t.isDone)\r\n                        }\r\n                        if (tl.filter === \"completed\") {\r\n                            tasksForTodolist = tasksState[tl.id].filter(t => t.isDone)\r\n                        }\r\n\r\n                        return (\r\n                            <Grid item xs={6}>\r\n                                <Paper elevation={3} style={{padding: 10, display: \"flex\", justifyContent: \"center\", minWidth: 120, maxWidth: 250}}>\r\n                                    <Todolist\r\n                                        todolistID={tl.id}\r\n                                        title={tl.title}\r\n                                        tasks={tasksForTodolist}\r\n                                        filter={tl.filter}\r\n                                        deleteTodoList={deleteTodoList}\r\n                                        dispatch={dispatch}\r\n                                    />\r\n                                </Paper>\r\n                            </Grid>\r\n\r\n                        )\r\n                    })}\r\n                </Grid>\r\n\r\n            </Container>\r\n        </div>\r\n    )\r\n        ;\r\n}\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {combineReducers, createStore} from \"redux\";\r\nimport {TotoListReducer} from \"../reducers/TodolistReducer\";\r\nimport {TasksReducer} from \"../reducers/TasksReducer\";\r\n\r\nexport const RootReducer = combineReducers({\r\n    todoLists: TotoListReducer,\r\n    tasks: TasksReducer\r\n})\r\n\r\nexport type AppStateType = ReturnType<typeof RootReducer>\r\n\r\nexport const AppState = createStore(RootReducer)","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {AppState} from \"./redux/Store\";\r\nimport {Provider} from 'react-redux';\r\n\r\n\r\nReactDOM.render(\r\n    <Provider store={AppState}>\r\n        <App/>\r\n    </Provider>\r\n    , document.getElementById('root'));\r\n\r\n\r\n// export const manualRerender = () => {\r\n//\r\n// }\r\n//\r\n// manualRerender()\r\n//\r\n// AppState.subscribe(manualRerender)\r\n\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}